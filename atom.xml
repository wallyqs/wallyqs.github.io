<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Literate Infrastructure</title>
 <link href="/atom.xml" rel="self"/>
 <link href="/"/>
 <updated>2015-02-26T01:54:33+09:00</updated>
 <id></id>
 <author>
   <name>Waldemar Quevedo</name>
   <email></email>
 </author>

 
 <entry>
   <title>Running Org Babel workloads on top of Mesos with Go and the Docker Containerizer</title>
   <link href="/posts/2015/02/25/ob-mesos/"/>
   <updated>2015-02-25T00:00:00+09:00</updated>
   <id>/posts/2015/02/25/ob-mesos</id>
   <content type="html">
&lt;p&gt;&lt;img src=&quot;/public/mesos-tasks-output.png&quot; alt=&quot;/public/mesos-tasks-output.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;One of the things that I left pending from my stay at
  &lt;a href=&quot;https://www.hackerschool.com&quot;&gt;HackerSchool&lt;/a&gt;, was to combine a couple of the technologies
  that have caught most of my attention: &lt;a href=&quot;http://mesos.apache.org/&quot;&gt;Mesos&lt;/a&gt; and &lt;a href=&quot;http://orgmode.org/worg/org-contrib/babel/&quot;&gt;Org mode&lt;/a&gt;.&lt;/p&gt;
&lt;img src=&quot;/public/Mesos-Org.png&quot; alt=&quot;/public/Mesos-Org.png&quot; style=&quot;margin-left: auto; margin-right: auto; display: block;&quot; /&gt;
&lt;p&gt;Although I&amp;#8217;m a big fan of the literate programming and active documents
  that Org Babel enables for Emacs there are some limitations in the way
  it does it.  It works perfectly for local runs to get the results in
  place within Emacs, but it does not work very well for long running
  processes:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC sh&lt;/span&gt;
&lt;span style=&quot;color: #66D9EF;&quot;&gt;while&lt;/span&gt; true; &lt;span style=&quot;color: #A6E22E;&quot;&gt;echo&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;hanging the Emacs session :P&quot;&lt;/span&gt;; &lt;span style=&quot;color: #66D9EF;&quot;&gt;done&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Also in case you want to run a code block remotely,
  you need to do it via ssh.  Combining this with &lt;code&gt;#+call&lt;/code&gt; blocks is
  still very cool though:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+name: install-emacs&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC sh :dir /ubuntu@192.168.0.7:/home/ubuntu&lt;/span&gt;
sudo apt-get update
sudo apt-get install -y emacs24-nox org-mode
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+call: install-emacs() :dir /ubuntu@192.168.0.8:/home/ubuntu&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+call: install-emacs() :dir /ubuntu@192.168.0.9:/home/ubuntu&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;For some cases, like provisioning and installing packages (usually the
  domain of tools like Chef, Puppet, Ansible, etc&amp;#8230;) this may work
  well, but for running jobs remotely we still have the same issue
  of the session hanging and running the code blocks sequentially:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+name: run-remotely&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC sh :dir /ubuntu@192.168.0.7:/home/ubuntu&lt;/span&gt;
&lt;span style=&quot;color: #66D9EF;&quot;&gt;while&lt;/span&gt; true; &lt;span style=&quot;color: #66D9EF;&quot;&gt;do &lt;/span&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;echo&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;called sequentially, blocks, not really what we want&quot;&lt;/span&gt;; &lt;span style=&quot;color: #66D9EF;&quot;&gt;done&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+call: run-remotely() :dir /ubuntu@192.168.0.8:/home/ubuntu&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+call: run-remotely() :dir /ubuntu@192.168.0.9:/home/ubuntu&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Not only that though, we also have to specify both the credentials
  and resources that we are using for running the workloads.
  Luckily, that is an area where Mesos really shines.&lt;/p&gt;
&lt;h3&gt;Implementation using the Mesos Go bindings&lt;/h3&gt;
&lt;p&gt;Mesos with its &lt;i&gt;level of indirection&lt;/i&gt; approach, exposes a set of APIs
  that we can rely on to be able to write custom schedulers in a
  different runtime.  The &lt;a href=&quot;https://github.com/mesos/mesos-go&quot;&gt;mesos-go&lt;/a&gt; bindings seem in actively development
  in particular, so I decided to base on those to write the scheduler.&lt;/p&gt;
&lt;p&gt;Then, another thing we need is something which can understand Org mode
  documents, for this I implemented a basic parser of &lt;a href=&quot;http://github.com/wallyqs/org-go&quot;&gt;Org mode in Go&lt;/a&gt;
  which can be loaded by the scheduler to orchestrate the run.&lt;/p&gt;
&lt;p&gt;Using the Go bindings, we start defining our scheduler:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OrgBabelScheduler&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;tasksLaunched&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;tasksFinished&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;blocks&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OrgSrcBlock&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And below is a a basic example of how the &lt;code&gt;ResourceOffers&lt;/code&gt;  handle
  would look.  Once having loaded the contents of the Org mode document,
  we will be inspecting the content of the code block its header
  arguments to procure the resources we want:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OrgBabelScheduler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ResourceOffers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SchedulerDriver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mesos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Offer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// We will get many resource offerings,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// but sometimes the resources being offered will not be enough&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// so we will need to implement backing off in case that happens.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tasks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mesos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TaskInfo&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blocks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;sched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tasksLaunched&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;

                &lt;span class=&quot;nx&quot;&gt;taskId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mesos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TaskID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;strconv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Itoa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tasksLaunched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Should build the command properly depending of the runtime&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// Currenty only sh supported, but good enough&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// since I can just call the runtime from there&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RawContent&lt;/span&gt;

                &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[OFFER ] Executing this code block:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// The code block specifies the resources it should allocate&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;taskCpus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MIN_CPUS_PER_TASK&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;:cpus&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;nx&quot;&gt;taskCpus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;strconv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Atoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;:cpus&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;nx&quot;&gt;taskMem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MIN_MEM_PER_TASK&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;:mem&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;nx&quot;&gt;taskMem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;strconv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Atoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;:mem&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mesos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TaskInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;nx&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ob-mesos-&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;taskId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;TaskId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;taskId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;SlaveId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SlaveId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// Executor: sched.executor,&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mesos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NewScalarResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;cpus&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;taskCpus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
                                &lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NewScalarResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mem&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;taskMem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mesos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CommandInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;nx&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Run within a Docker container if :dockerimage is specified&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;:dockerimage&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mesos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ContainerInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mesos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ContainerInfo_DOCKER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                                &lt;span class=&quot;nx&quot;&gt;Docker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mesos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ContainerInfo_DockerInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                        &lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;:dockerimage&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
					&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[OFFER ] Prepared to launch task:%s with offer %s \n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GetName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

                &lt;span class=&quot;nx&quot;&gt;tasks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[OFFER ] Launching &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;tasks for offer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LaunchTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mesos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OfferID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mesos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RefuseSeconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Full source of the implementation can be found &lt;a href=&quot;https://github.com/wallyqs/mesos-notes/blob/master/org/org-scheduler.org&quot;&gt;here&lt;/a&gt;, written in
  literate programming with Org mode of course..&lt;/p&gt;
&lt;h3&gt;Basic usage example: Running two commands in parallel&lt;/h3&gt;
&lt;p&gt;A basic example, would be something like this:&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #b3b3b3;&quot;&gt;#+title:&lt;/span&gt; &lt;span style=&quot;color: #cafe12; font-size: 144%; font-weight: bold;&quot;&gt;Example of running Org Babel workloads on Mesos&lt;/span&gt;

&lt;span style=&quot;color: #A6E22E;&quot;&gt;*** Mesos settings&lt;/span&gt;

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+address: 192.168.0.7&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+master:  192.168.0.7:5050&lt;/span&gt;

&lt;span style=&quot;color: #A6E22E;&quot;&gt;*** Code blocks&lt;/span&gt;

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+name: hello-mesos&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+header: :cpus 2 :mem 128&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC sh&lt;/span&gt;
&lt;span style=&quot;color: #66D9EF;&quot;&gt;while&lt;/span&gt; true; &lt;span style=&quot;color: #66D9EF;&quot;&gt;do&lt;/span&gt; 
  &lt;span style=&quot;color: #A6E22E;&quot;&gt;echo&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;hello world from Org Babel!!!&quot;&lt;/span&gt;
  sleep 1
&lt;span style=&quot;color: #66D9EF;&quot;&gt;done&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+name: date-example&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+header: :cpus 2 :mem 256&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC sh&lt;/span&gt;
&lt;span style=&quot;color: #66D9EF;&quot;&gt;while&lt;/span&gt; true; &lt;span style=&quot;color: #66D9EF;&quot;&gt;do&lt;/span&gt; 
  &lt;span style=&quot;color: #A6E22E;&quot;&gt;echo&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Telling the time!&quot;&lt;/span&gt;
  date
  sleep 1
&lt;span style=&quot;color: #66D9EF;&quot;&gt;done&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here, I am defining 2 code blocks, allocating 2 cpus to each.
  Also the second one will have a bit more memory than the other one.
  Only Mesos related configuration that we need is the location of a
  Mesos master and the ip address of the server from where we are
  running the scheduler.&lt;/p&gt;
&lt;h4&gt;Results&lt;/h4&gt;
&lt;p&gt;The end result of this experiment looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;$ go run examples/org_scheduler.go -f org/job.org -logtostderr=true 

...
[REGIST] Framework Registered with Master  &amp;amp;MasterInfo{Id:*20150225-084641-117483712-5050-23902,Ip:*117483712,Port:*5050,Pid:*master@192.168.0.7:5050,Hostname:*192.168.0.7,XXX_unrecognized:[],}
[OFFER ] offerId = 20150225-084641-117483712-5050-23902-O60 , cpus = 4 , mem = 2812
[OFFER ] Executing this code block: hello-mesos map[:procs:5 :cpus:2 :mem:128]
[OFFER ] Prepared to launch task:ob-mesos-1 with offer 20150225-084641-117483712-5050-23902-O60 
[OFFER ] Executing this code block: date-example map[:cpus:2 :mem:256]
[OFFER ] Prepared to launch task:ob-mesos-2 with offer 20150225-084641-117483712-5050-23902-O60 
[OFFER ] Launching  2 tasks for offer 20150225-084641-117483712-5050-23902-O60
[STATUS] task 1  is in state  TASK_RUNNING
[STATUS] task 2  is in state  TASK_RUNNING
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also check the logs within the Mesos slave sandbox:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/mesos-tasks.png&quot; alt=&quot;/public/mesos-tasks.png&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Containerizer usage example: Running a command within a Docker container&lt;/h3&gt;
&lt;p&gt;Thanks to the built-in Docker containerizer from Mesos,
  it would also be possible to specify a Docker image so
  that the command gets executed within a container.&lt;/p&gt;
&lt;p&gt;In this example, the first block will specify the entrypoint and set
  &lt;code&gt;:dockerimage redis&lt;/code&gt; so that the redis image is pulled and ran.&lt;/p&gt;
&lt;p&gt;Then the second one will be using that redis container and updating a timestamp.&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #b3b3b3;&quot;&gt;#+title:&lt;/span&gt;   &lt;span style=&quot;color: #cafe12; font-size: 144%; font-weight: bold;&quot;&gt;Org + Docker + Mesos + Redis Example&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+address: 192.168.0.7&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+master:  192.168.0.7:5050&lt;/span&gt;

Here is a redis server, we can define the entrypoint to be used
within the Docker image via an Org Babel block:

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+name: redis-server&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+header: :cpus 2 :mem 512 :dockerimage redis&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC sh&lt;/span&gt;
redis-server
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;

In parallel, there will be another job running
which will be setting the time in the redis server:

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+name: set-time-in-redis&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+header: :cpus 2 :mem 256&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC sh&lt;/span&gt;
&lt;span style=&quot;color: #66D9EF;&quot;&gt;while&lt;/span&gt; true; &lt;span style=&quot;color: #66D9EF;&quot;&gt;do&lt;/span&gt; 
  &lt;span style=&quot;color: #A6E22E;&quot;&gt;echo&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;SET time `date &#39;+%s&#39;`&quot;&lt;/span&gt; | nc 127.0.0.1 6379
  sleep 1
&lt;span style=&quot;color: #66D9EF;&quot;&gt;done&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;h4&gt;Results&lt;/h4&gt;
&lt;p&gt;Output would be:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;[OFFER ] offerId = 20150225-174751-117483712-5050-13334-O1376 , cpus = 4 , mem = 2812
[OFFER ] Executing this code block: redis-server map[:mem:512 :dockerimage:redis :cpus:2]
[OFFER ] Prepared to launch task:ob-mesos-1 with offer 20150225-174751-117483712-5050-13334-O1376 
[OFFER ] Executing this code block: set-time-in-redis map[:mem:256 :cpus:2]
[OFFER ] Prepared to launch task:ob-mesos-2 with offer 20150225-174751-117483712-5050-13334-O1376 
[OFFER ] Launching  2 tasks for offer 20150225-174751-117483712-5050-13334-O1376
[STATUS] task 2  is in state  TASK_RUNNING
[STATUS] task 1  is in state  TASK_RUNNING
[OFFER ] offerId = 20150225-174751-117483712-5050-13334-O1377 , cpus = 0 , mem = 2044
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can also confirm that it has been run by the Docker engine:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;sudo docker ps

CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES
1a8b3c964c3e        redis:latest        &lt;span class=&quot;err&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;/bin/sh -c redis-   17 minutes ago      Up 17 minutes                           mesos-88de0870-b613-4bda-9ed4-30995834ccab
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and that a timestamp has been set:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;telnet 127.0.0.1 6379

Trying 127.0.0.1...
Connected to 127.0.0.1.
Escape character is &lt;span class=&quot;s1&quot;&gt;&amp;#39;^]&amp;#39;&lt;/span&gt;.
get &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$10&lt;/span&gt;
1424882889
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also check the logs within the sandbox:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;==&amp;gt; /tmp/mesos/slaves/20150223-223304-117483712-5050-29395-S0/frameworks/20150225-174751-117483712-5050-13334-0018/executors/1/runs/88de0870-b613-4bda-9ed4-30995834ccab/stdout &amp;lt;==
[8] 25 Feb 16:25:07.322 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
                _._
           _.-``__ &amp;#39;&amp;#39;-._
      _.-``    `.  `_.  &amp;#39;&amp;#39;-._           Redis 2.8.17 (00000000/0) 64 bit
  .-`` .-```.  ```\/    _.,_ &amp;#39;&amp;#39;-._
 (    &amp;#39;      ,       .-`  | `,    )     Running in stand alone mode
 |`-._`-...-` __...-.``-._|&amp;#39;` _.-&amp;#39;|     Port: 6379
 |    `-._   `._    /     _.-&amp;#39;    |     PID: 8
  `-._    `-._  `-./  _.-&amp;#39;    _.-&amp;#39;
 |`-._`-._    `-.__.-&amp;#39;    _.-&amp;#39;_.-&amp;#39;|
 |    `-._`-._        _.-&amp;#39;_.-&amp;#39;    |           http://redis.io
  `-._    `-._`-.__.-&amp;#39;_.-&amp;#39;    _.-&amp;#39;
 |`-._`-._    `-.__.-&amp;#39;    _.-&amp;#39;_.-&amp;#39;|
 |    `-._`-._        _.-&amp;#39;_.-&amp;#39;    |
  `-._    `-._`-.__.-&amp;#39;_.-&amp;#39;    _.-&amp;#39;
      `-._    `-.__.-&amp;#39;    _.-&amp;#39;
          `-._        _.-&amp;#39;
              `-.__.-&amp;#39;

[8] 25 Feb 16:25:07.349 # Server started, Redis version 2.8.17
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;But, why even use Org mode for this?  Well, the best thing I think
  that it has for it is that we are &lt;b&gt;adding value transparently&lt;/b&gt; to the
  way that we are executing our workloads along with its description.&lt;/p&gt;
&lt;p&gt;By having a document format where code blocks are first class citizen,
  we can both manipulate the way we run something without losing the
  thought process of how we ran it in the first place (since human writing also
  first class citizen), thus emphasizing both reproducibility and readability.&lt;/p&gt;
&lt;p&gt;Locally, the code blocks would still eval
  using the Org mode active document features, but by dispatching it to
  something like the &lt;code&gt;OrgBabelScheduler&lt;/code&gt;, we can just &lt;i&gt;lift&lt;/i&gt; those code blocks and run
  them in a distributed fashion.&lt;/p&gt;
&lt;p&gt;There are still some ideas I have around this and the possibilites
  that it would open around &lt;i&gt;reproducible research&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;Feedback is very welcome! You can also follow me on &lt;a href=&quot;https://twitter.com/wallyqs&quot;&gt;Twitter&lt;/a&gt; if you
  find this interesting&amp;#8230;&lt;/p&gt;


</content>
 </entry>
 
 <entry>
   <title>About type switch usage in Go</title>
   <link href="/posts/2014/12/25/learning-go-backwards/"/>
   <updated>2014-12-25T00:00:00+09:00</updated>
   <id>/posts/2014/12/25/learning-go-backwards</id>
   <content type="html">
&lt;p&gt;One of the features that I have been relying a lot in Go is the &lt;a href=&quot;https://golang.org/doc/effective_go.html#type_switch&quot;&gt;type switch&lt;/a&gt;.
  This feature is specially useful when using interfaces since it helps us avoid having to do type assertions all the time.&lt;/p&gt;
&lt;p&gt;A couple of examples below.&lt;/p&gt;
&lt;h3&gt;Example #1&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s suppose that we have 3 types &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt; &amp;amp; &lt;code&gt;C&lt;/code&gt;,
  where each one of these types can be assigned a &lt;code&gt;Name&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;reflect&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we put them inside of a slice which can contain &lt;code&gt;interfaces&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Without using &lt;code&gt;type switch&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;We would end up doing something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;--- without type switching&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;is of type A. Name is:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;is of type B. Name is:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;is of type C. Name is:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Results&lt;/h5&gt;
&lt;pre class=&quot;example&quot;&gt;
--- without type switching
*main.A is of type A. Name is: A
*main.B is of type B. Name is: B
*main.C is of type C. Name is: C
&lt;/pre&gt;
&lt;h4&gt;Using a &lt;code&gt;type switch&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Makes things a little more bearable:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;--- type switching on the item&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;is of type A. Name is:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;is of type B. Name is:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;is of type C. Name is:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Results&lt;/h5&gt;
&lt;pre class=&quot;example&quot;&gt;
--- type switching on the item
*main.A is of type A. Name is: A
*main.B is of type B. Name is: B
*main.C is of type C. Name is: C
&lt;/pre&gt;
&lt;h3&gt;Example #2&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s see how far we can take it.
  Now, let&amp;#8217;s suppose that we want to handle A and B the same way.&lt;/p&gt;
&lt;h4&gt;Using &lt;code&gt;type switch&lt;/code&gt;, it works too&lt;/h4&gt;
&lt;p&gt;Since we want to handle &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; the same way, we could think
  that we could group them into the same &lt;code&gt;case&lt;/code&gt;, which would work:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;--- Grouping A and B: &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;is of type A or B.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;is of type C.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Results&lt;/h5&gt;
&lt;pre class=&quot;example&quot;&gt;
*main.A is of type A or B.
*main.B is of type A or B.
*main.C is of type C.
&lt;/pre&gt;
&lt;h4&gt;Until it doesn&amp;#8217;t&lt;/h4&gt;
&lt;p&gt;Let&amp;#8217;s suppose that we want to inspect the value of the &lt;code&gt;Name&lt;/code&gt; field. Then it breaks:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;is of type A or B. Name is:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;is of type C. Name is:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above would throw the following error:&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
o.Name undefined (type interface {} has no field or method Name)
&lt;/pre&gt;
&lt;h4&gt;Back to &lt;code&gt;interface&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;What happened here is that by trying to group &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt; types, we ended up again
  with an &lt;code&gt;interface&lt;/code&gt;, so we cannot rely on the first type switch anymore.&lt;/p&gt;
&lt;p&gt;We could type switch once more time then:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;--- Double type switch all the way&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;is of type A or B. Name is:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;is of type A or B. Name is:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;is of type C. Name is:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Results&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;--- Double type switch all the way
*main.A is of type A or B. Name is: A
*main.B is of type A or B. Name is: B
*main.C is of type C. Name is: C
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;#8230;which looks a bit messy. A more straightforward way would be to
  flinch away our desire to make things &amp;#8220;DRY&amp;#8221;, still rely on the first type switch
  and just repeat more code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;--- The Go Way™&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;is of type A or B. Name is:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;is of type A or B. Name is:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;is of type C. Name is:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;#8230;which results in:&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
--- The Go Way™
*main.A is of type A or B. Name is: A
*main.B is of type A or B. Name is: B
*main.C is of type C. Name is: C
&lt;/pre&gt;
&lt;h3&gt;Progress so far&lt;/h3&gt;
&lt;p&gt;So which one of the approaches is better?&lt;/p&gt;
&lt;p&gt;I would say that probably the one with the
  multiple case statements where the same line is repeated, since when
  we type switch and have a &lt;code&gt;case&lt;/code&gt; statement with one more type,
  we end up once again with an &lt;code&gt;interface&lt;/code&gt;, and we need yet another &lt;code&gt;type switch&lt;/code&gt;
  for it that generates more code which more or less says the
  same thing, so it seems that it is about as DRY as it could get
  for now using only &lt;code&gt;type switch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/PEsLe_ZRzE&quot;&gt;Link to the Go playground with the example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To solve the grouping problem, there is something else that we can
  try besides only using the &lt;code&gt;type switch&lt;/code&gt;, which is using &lt;code&gt;interface&lt;/code&gt; types.&lt;/p&gt;
&lt;h3&gt;Example #3&lt;/h3&gt;
&lt;p&gt;Another alternative would be to use a &lt;code&gt;Nameable&lt;/code&gt; interface when creating the slice.
  This means first having to declare something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Nameable&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;GetName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BasicAttrs&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Code generation could help with this...&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BasicAttrs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GetName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BasicAttrs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GetName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BasicAttrs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GetName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So that we can later on use it as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BasicAttrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BasicAttrs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BasicAttrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BasicAttrs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;B&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BasicAttrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BasicAttrs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Nameable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;--- The correct Go way?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	   &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	      &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;is of type A or B. Name is:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GetName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	   &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	     &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;is of type C. Name is:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GetName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Results&lt;/h5&gt;
&lt;pre class=&quot;example&quot;&gt;
--- The correct Go way?
*main.A is of type A or B. Name is: A
*main.B is of type A or B. Name is: B
*main.C is of type C. Name is: C
&lt;/pre&gt;
&lt;h3&gt;Is this better?&lt;/h3&gt;
&lt;p&gt;I think so.  Even though the implementation is a bit more verbose, the last example using a &lt;code&gt;type interface&lt;/code&gt;
  might be the way to go in case we face the grouping issue from the raw interface.&lt;/p&gt;


</content>
 </entry>
 
 <entry>
   <title>Quickly inspecting HTTP traffic with tcpdump</title>
   <link href="/posts/2014/12/12/using-tcpdump/"/>
   <updated>2014-12-12T00:00:00+09:00</updated>
   <id>/posts/2014/12/12/using-tcpdump</id>
   <content type="html">
&lt;p&gt;Just a quick post on one of my favorite features of &lt;code&gt;tcpdump&lt;/code&gt; that I
  have found useful for doing quick investigations of the behavior of an app
  and you need a little bit more than what you get with the access logs.&lt;/p&gt;
&lt;p&gt;Wireshark has this &lt;a href=&quot;http://www.wireshark.org/tools/string-cf.html&quot;&gt;great site&lt;/a&gt; that given a HTTP request,
  will give you a filter that if paired with the &lt;code&gt;-A&lt;/code&gt; (print packet in ASCII) option from &lt;code&gt;tcpdump&lt;/code&gt;
  will match all related HTTP traffic that is going on in a node.&lt;/p&gt;
&lt;p&gt;A couple of basic examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Show all &lt;code&gt;GET&lt;/code&gt; requests&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;tcpdump -A &lt;span class=&quot;s1&quot;&gt;&amp;#39;tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):2] = 0x4745 &amp;amp;&amp;amp; tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2) + 2:1] = 0x54&amp;#39;&lt;/span&gt;

tcpdump: verbose output suppressed, use -v or -vv &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;full protocol decode
listening on wlan0, link-type EN10MB &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ethernet&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, capture size 65535 bytes
16:31:54.870479 IP 10.0.1.134.56724 &amp;gt; 10.0.7.64.http-alt: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, seq 1988783165:1988783563, ack 2609786817, win 65535, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 703013338 ecr 40647638&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, length 398
E...Bt@.@...
...
..@....v.l&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;../............
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.!..l&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;.GET /v2/apps HTTP/1.1
Host: 10.0.77.64:8080
Connection: keep-alive
Accept: application/json, text/javascript, */*&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.01
X-Requested-With: XMLHttpRequest
User-Agent: Mozilla/5.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Macintosh&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Intel Mac OS X 10_7_5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; AppleWebKit/537.36 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;KHTML, like Gecko&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Chrome/39.0.2171.71 Safari/537.36
Referer: http://10.0.7.64:8080/
Accept-Encoding: gzip, deflate, sdch
Accept-Language: en-US,en&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.8
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Show all &lt;code&gt;POST&lt;/code&gt; requests&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;tcpdump -A &lt;span class=&quot;s1&quot;&gt;&amp;#39;tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x504f5354&amp;#39;&lt;/span&gt;

tcpdump: verbose output suppressed, use -v or -vv &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;full protocol decode
listening on wlan0, link-type EN10MB &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ethernet&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, capture size 65535 bytes
16:41:59.925399 IP 10.0.1.134.56765 &amp;gt; 10.0.7.64.http-alt: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, seq 1595944397:1595945056, ack 1073928153, win 65535, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 703610055 ecr 40792556&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, length 659
E.....@.@.o.
...
..@...._ -.@..............
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.&amp;lt;..nq.POST /v2/apps HTTP/1.1
Host: 10.0.77.64:8080
Connection: keep-alive
Content-Length: 182
Accept: application/json, text/javascript, */*&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.01
Origin: http://10.0.7.64:8080
X-Requested-With: XMLHttpRequest
User-Agent: Mozilla/5.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Macintosh&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Intel Mac OS X 10_7_5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; AppleWebKit/537.36 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;KHTML, like Gecko&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Chrome/39.0.2171.71 Safari/537.36
Content-Type: application/json
Referer: http://10.0.7.64:8080/
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.8
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can add more info to the path (e.g. &lt;code&gt;GET /v2/&lt;/code&gt;) to narrow down the actions
  that are being investigated.&lt;/p&gt;


</content>
 </entry>
 
 <entry>
   <title>Org Babelで文芸的プログラミング</title>
   <link href="/posts/2014/12/12/using-org-babel-for-lp-jp/"/>
   <updated>2014-12-12T00:00:00+09:00</updated>
   <id>/posts/2014/12/12/using-org-babel-for-lp-jp</id>
   <content type="html">
&lt;p&gt;(This is a post for the &lt;a href=&quot;http://qiita.com/advent-calendar/2014/emacs&quot;&gt;Emacs Advent Calendar 2014&lt;/a&gt; from Japan, a similar English version can be found &lt;a href=&quot;http://literateinfrastructure.org/posts/2014/12/12/using-org-babel-for-lp/&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Org modeの話を聞いたことがある方は、Org modeは「TODOリスト管理ツールの
  一つだ」と思われる方が多いかもしれません。それはその通りですが、
  Org Babelというモードで、「文芸的プログラミング(Literate Programming)」を実現することができます。&lt;/p&gt;
&lt;p&gt;Org Babelの使い方を示すために、あるホストのモニタリング情報を表示する、
  単純なSinatraアプリケーションを例えにします。&lt;/p&gt;
&lt;h3&gt;例: ホストのモニタリング情報を表示するSinatra app&lt;/h3&gt;
&lt;p&gt;表示したい項目をシステムの &lt;code&gt;uptime&lt;/code&gt; と ESTABLISHEDコネクションの数に絞り込みます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;uptime

20:37  up 4 days,  9:48, 5 users, load averages: 0.67 0.86 1.11
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ESTABLISHED&lt;/code&gt; コネクションの数:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;netstat -an &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep ESTABLISHED &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; wc -l

       5
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この二つのコマンドの結果を集めて、 HTTPクライアントを使えば
  &lt;code&gt;GET /vars&lt;/code&gt; で取れるようになります：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;curl 127.0.0.1:9292/vars
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;事前準備&lt;/h3&gt;
&lt;p&gt;まず、ディレクトリの作成が必要です:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;mkdir -p org
mkdir -p src
touch readme.org
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;org/&lt;/code&gt; ディレクトリの下に置くファイルはOrg mode で書きます&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;src/&lt;/code&gt; ディレクトリの下に置くファイルはSinatraアプリケーションのソースコード&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;code&gt;readme.org&lt;/code&gt; の作成は必要ではないですが、best practiceとしておすすめします&amp;#8230;)&lt;/p&gt;
&lt;p&gt;最終的に、ディレクトリ構成はこんな感じになります:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;.
├── org
│   ├── app.org
│   └── run.org
├── readme.org
├── src
│   ├── Gemfile
│   ├── app.rb
│   └── config.ru
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;実装&lt;/h3&gt;
&lt;p&gt;アプリケーションの実装自体は &lt;code&gt;org/app.org&lt;/code&gt; に書きます。&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
touch org/app.org
&lt;/pre&gt;
&lt;h4&gt;プロトタイプ&lt;/h4&gt;
&lt;p&gt;SinatraのWebアプリケーションを実装前に、Org Babel を使ってプロトタイプを作りましょう。
  Rubyのcode blockを書いたら、 &lt;code&gt;C-c C-c&lt;/code&gt; で実行することができます。&lt;/p&gt;
&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;*** Notes on how to get the results&lt;/span&gt;

We could use something simple like:

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+begin_src ruby :results output code&lt;/span&gt;
s = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&amp;lt;&amp;lt;VARS&lt;/span&gt;
&lt;span style=&quot;color: #E6DB74;&quot;&gt;Uptime:&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;#{`uptime`}&lt;/span&gt;

&lt;span style=&quot;color: #E6DB74;&quot;&gt;ESTABLISHED connections:&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;#{`netstat -an | grep ESTABLISHED | wc -l`}&lt;/span&gt;

&lt;span style=&quot;color: #E6DB74;&quot;&gt;VARS&lt;/span&gt;

puts s
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+end_src&lt;/span&gt;

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+RESULTS:&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC ruby&lt;/span&gt;
&lt;span style=&quot;color: #66D9EF;&quot;&gt;Uptime&lt;/span&gt;:
22&lt;span style=&quot;color: #AE81FF;&quot;&gt;:23&lt;/span&gt;  up 4 days, 11&lt;span style=&quot;color: #AE81FF;&quot;&gt;:34&lt;/span&gt;, 5 users, load averages: 0.58 0.46 0.30


&lt;span style=&quot;color: #66D9EF;&quot;&gt;ESTABLISHED&lt;/span&gt; connections:
       8


&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;
&lt;/pre&gt;
&lt;h4&gt;&lt;code&gt;:tangle&lt;/code&gt; の使い方&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;:tangle&lt;/code&gt; はOrg modeのcode block switch argumentsの一つです。
  これを使えば、Org modeのcode blockは実装しているファイルを設定できます。&lt;/p&gt;
&lt;p&gt;例えば、 &lt;code&gt;:tangle&lt;/code&gt; を使って &lt;code&gt;Gemfile&lt;/code&gt; と &lt;code&gt;config.ru&lt;/code&gt; の内容を書きましょう。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;Dependencies from the app, just sinatra and webrick &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the server is ok &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;now.

&lt;span class=&quot;c&quot;&gt;#+BEGIN_SRC ruby :tangle src/Gemfile&lt;/span&gt;
gem &lt;span class=&quot;s1&quot;&gt;&amp;#39;sinatra&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#+END_SRC&lt;/span&gt;

Needed to start the Sinatra application:

&lt;span class=&quot;c&quot;&gt;#+BEGIN_SRC ruby :tangle src/config.ru&lt;/span&gt;
require &lt;span class=&quot;s1&quot;&gt;&amp;#39;./app.rb&amp;#39;&lt;/span&gt;
run Sinatra::Application
&lt;span class=&quot;c&quot;&gt;#+END_SRC&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;i&gt;全体例&lt;/i&gt;&lt;/h4&gt;
&lt;p&gt;EmacsのOrg modeバッファーで, &lt;code&gt;C-c C-v t&lt;/code&gt; か &lt;code&gt;C-c C-v C-t&lt;/code&gt; を叩けば、
  Org modeの &lt;code&gt;org-babel-tangle&lt;/code&gt; の機能を呼び出します。
  これで、動かせるプログラムは &lt;code&gt;src/&lt;/code&gt; ディレクトリの下に現れます。&lt;/p&gt;
&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #b3b3b3;&quot;&gt;#+TITLE:&lt;/span&gt; &lt;span style=&quot;color: #cafe12; font-size: 144%; font-weight: bold;&quot;&gt;Monitoring HTTP endpoint&lt;/span&gt;

  This is a simple Sinatra application that provides
  the following endpoints:

  &amp;hyphen; &lt;span style=&quot;color: #cafe12; font-weight: bold;&quot;&gt;=/=&lt;/span&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;        ::&lt;/span&gt; which responds &lt;span style=&quot;color: #cafe12;&quot;&gt;=OK=&lt;/span&gt; in case all is good with the server.
  &amp;hyphen; &lt;span style=&quot;color: #cafe12; font-weight: bold;&quot;&gt;=/vars=&lt;/span&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;    ::&lt;/span&gt; to get info about the system

  &lt;span style=&quot;color: #F92672;&quot;&gt;** Bootstrapping the app&lt;/span&gt;

  &lt;span style=&quot;color: #A6E22E;&quot;&gt;*** Gemfile&lt;/span&gt;

  Dependencies from the app, just sinatra and webrick for now is ok.

  &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC ruby :tangle src/Gemfile&lt;/span&gt;
  gem &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;sinatra&#39;&lt;/span&gt;
  &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;

  &lt;span style=&quot;color: #A6E22E;&quot;&gt;*** Config.ru&lt;/span&gt;

  Needed to start the sinatra application

  &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC ruby :tangle src/config.ru&lt;/span&gt;
  require &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;./app.rb&#39;&lt;/span&gt;
  run &lt;span style=&quot;color: #66D9EF;&quot;&gt;Sinatra&lt;/span&gt;::&lt;span style=&quot;color: #66D9EF;&quot;&gt;Application&lt;/span&gt;
  &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;

  &lt;span style=&quot;color: #F92672;&quot;&gt;** The App&lt;/span&gt;

  &lt;span style=&quot;color: #A6E22E;&quot;&gt;*** Import dependencies&lt;/span&gt;

  &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC ruby :tangle src/app.rb&lt;/span&gt;

  require &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;sinatra&#39;&lt;/span&gt;

  &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;

  &lt;span style=&quot;color: #A6E22E;&quot;&gt;*** &lt;/span&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;=/=&lt;/span&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt; endpoint&lt;/span&gt;

  Just respond with &lt;span style=&quot;color: #cafe12;&quot;&gt;=OK=&lt;/span&gt;.

  &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC ruby :tangle src/app.rb&lt;/span&gt;
  get &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;/&#39;&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;do&lt;/span&gt;
  &lt;span style=&quot;color: #E6DB74;&quot;&gt;&amp;nbsp;&amp;nbsp;&#39;OK&#39;&lt;/span&gt;
  &lt;span style=&quot;color: #66D9EF;&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;

  &lt;span style=&quot;color: #A6E22E;&quot;&gt;*** &lt;/span&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;=/vars=&lt;/span&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt; endpoint&lt;/span&gt;

  Respond with info about the system:

  &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC ruby :tangle src/app.rb&lt;/span&gt;
  get &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;/vars&#39;&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;do&lt;/span&gt;

  r = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&amp;lt;&amp;lt;VARS&lt;/span&gt;
  &lt;span style=&quot;color: #E6DB74;&quot;&gt;Uptime:&lt;/span&gt;
  &lt;span style=&quot;color: #F92672;&quot;&gt;#{`uptime`}&lt;/span&gt;

  &lt;span style=&quot;color: #E6DB74;&quot;&gt;ESTABLISHED connections:&lt;/span&gt;
  &lt;span style=&quot;color: #F92672;&quot;&gt;#{`netstat -an | grep ESTABLISHED | wc -l`}&lt;/span&gt;

  &lt;span style=&quot;color: #E6DB74;&quot;&gt;VARS&lt;/span&gt;

  r
  &lt;span style=&quot;color: #66D9EF;&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;
&lt;/pre&gt;

&lt;h3&gt;動かす方法&lt;/h3&gt;
&lt;p&gt;次に、プログラムを動かす方法を &lt;code&gt;org/run.org&lt;/code&gt; にまとめます。
  プログラムを動かす前に、Sinatraのプログラムに修正があったかも知れないので、
  &lt;code&gt;#+include: org/app.org&lt;/code&gt; でこの依存関係を設定します。&lt;/p&gt;
&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #b3b3b3;&quot;&gt;#+TITLE:&lt;/span&gt;   &lt;span style=&quot;color: #cafe12; font-size: 144%; font-weight: bold;&quot;&gt;Running the Application&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+include: &quot;org/app.org&quot;&lt;/span&gt;

&lt;span style=&quot;color: #F92672;&quot;&gt;** Run it&lt;/span&gt;

To run it, we will need to get the dependencies first,
and then start it with bundler:

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+name: server&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC sh :dir src&lt;/span&gt;
bundle install
bundle exec rackup
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;

Now let&#39;s send some requests to it:

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+name: curl&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC sh :wait 1&lt;/span&gt;
&lt;span style=&quot;color: #66D9EF;&quot;&gt;while&lt;/span&gt; true; &lt;span style=&quot;color: #66D9EF;&quot;&gt;do&lt;/span&gt; 
  curl 127.0.0.1:9292/vars 2&amp;gt; /dev/null
  sleep 1
&lt;span style=&quot;color: #66D9EF;&quot;&gt;done&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Emacsでlong running processesを実行できますが、そうするとEmacsがコードブロック
  の結果待ちをしてしまいます&amp;#8230; それを避けるため、
  コードブロックの上に、 &lt;code&gt;#+name&lt;/code&gt; を設定すれば、私が作ったgemで叩くことができます:&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
gem install org-converge
org-run org/run.org
&lt;/pre&gt;
&lt;p&gt;そうすると結果は以下のようになります：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;org-run org/run.org
...
Running code blocks now! (2 runnable blocks found in total)
server    -- started with pid 71840
curl      -- started with pid 71841
server    -- Using rack 1.5.2
server    -- Using rack-protection 1.5.3
server    -- Using tilt 1.4.1
server    -- Using sinatra 1.4.5
server    -- Using bundler 1.7.1
server    -- Your bundle is complete!
server    -- Use `bundle show [gemname]` to see where a bundled gem is installed.
server    -- [2014-12-11 22:56:42] INFO  WEBrick 1.3.1
server    -- [2014-12-11 22:56:42] INFO  ruby 2.1.2 (2014-05-08) [x86_64-darwin11.0]
server    -- [2014-12-11 22:56:42] INFO  WEBrick::HTTPServer#start: pid=71848 port=9292
server    -- 127.0.0.1 - - [11/Dec/2014 22:56:42] &amp;quot;GET /vars HTTP/1.1&amp;quot; 200 110 0.0527
curl      -- Uptime:
curl      -- 22:56  up 4 days, 12:07, 5 users, load averages: 0.78 0.84 0.76
curl      -- 
curl      -- 
curl      -- ESTABLISHED connections:
curl      --       12
curl      -- 
curl      -- 
server    -- 127.0.0.1 - - [11/Dec/2014 22:56:43] &amp;quot;GET /vars HTTP/1.1&amp;quot; 200 110 0.0210
curl      -- Uptime:
curl      -- 22:56  up 4 days, 12:07, 5 users, load averages: 0.78 0.84 0.76
curl      -- 
curl      -- 
curl      -- ESTABLISHED connections:
curl      --       12
curl      -- 
curl      -- 
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;まとめ&lt;/h3&gt;
&lt;p&gt;Org modeはとても便利です！皆さんぜひお試しください。
  しかも、Githubさんが org-rubyを使って &lt;code&gt;.org&lt;/code&gt; ファイルをHTMLに変換してくれるのです。
  Ruby の Org modeパーサはまだOrg mode のすべての機能に追いついていませんが、
  私がある程度メンテナンスしています。もしOrg Rubyに何かの問題があれば、
  こちらに &lt;a href=&quot;https://github.com/wallyqs/org-ruby/issues&quot;&gt;issue&lt;/a&gt; を発行していただければと思います。 :)&lt;/p&gt;
&lt;p&gt;(そして、日本語が間違っている場合、こちらに &lt;a href=&quot;https://github.com/wallyqs/wallyqs.github.io/tree/source/org/posts&quot;&gt;PR&lt;/a&gt; ください&amp;#8230;)&lt;/p&gt;


</content>
 </entry>
 
 <entry>
   <title>Using Org Babel for Literate Programming</title>
   <link href="/posts/2014/12/12/using-org-babel-for-lp/"/>
   <updated>2014-12-12T00:00:00+09:00</updated>
   <id>/posts/2014/12/12/using-org-babel-for-lp</id>
   <content type="html">
&lt;p&gt;Most people that have heard about Org mode are aware that
  it is a tool meant for creating &lt;code&gt;TODO&lt;/code&gt; lists, taking notes,
  and even doing documentation to some extent.&lt;/p&gt;
&lt;p&gt;What is not immediately clear about Org mode is that it is a very
  powerful tool for doing literate programming and a comfortable
  environment for working with active documents.&lt;/p&gt;
&lt;p&gt;Rather than explain the ideas one by one, I will give a more
  practical example of what it is possible to do with it.&lt;/p&gt;
&lt;h3&gt;Example: Creating a monitoring HTTP endpoint&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s create a simple HTTP endpoint with Sinatra which
  will respond with some information about the host where it is running,
  like its &lt;code&gt;uptime&lt;/code&gt; and the number of established connections.&lt;/p&gt;
&lt;h4&gt;Requirements&lt;/h4&gt;
&lt;p&gt;What we want is basically the output of the following commands:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;uptime
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;#8230;which will show something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;20:37  up 4 days,  9:48, 5 users, load averages: 0.67 0.86 1.11
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;netstat -an &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep ESTABLISHED &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; wc -l
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which shows a number:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;5
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result from both commands would be aggregated into
  the response sent by the the server when we request &lt;code&gt;/vars&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;curl 127.0.0.1:9292/vars
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
Uptime:

20:37  up 4 days,  9:48, 5 users, load averages: 0.67 0.86 1.11

ESTABLISHED connections: 14

&lt;/pre&gt;
&lt;h3&gt;Preparation&lt;/h3&gt;
&lt;p&gt;We will start by creating a couple of folders, one for the content
  we write in Org, and another one for the actual implementation.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;mkdir -p org
mkdir -p src
touch readme.org
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(The &lt;code&gt;readme.org&lt;/code&gt; file is of course optional, but still a good practice to follow.)&lt;/p&gt;
&lt;p&gt;In the end, our directory structure will look something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;.
├── org
│   ├── app.org
│   └── run.org
├── readme.org
├── src
│   ├── Gemfile
│   ├── app.rb
│   └── config.ru
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Implementation&lt;/h3&gt;
&lt;p&gt;Most of the contents of our application, we will develop within an
  &lt;code&gt;org/app.org&lt;/code&gt; file.&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
touch org/app.org
&lt;/pre&gt;
&lt;h4&gt;Prototyping phase&lt;/h4&gt;
&lt;p&gt;Usually, while developing a program we go into a &lt;code&gt;REPL&lt;/code&gt; to test out what
  would eventually make it into the program.&lt;/p&gt;
&lt;p&gt;With &lt;b&gt;Org Babel&lt;/b&gt; though, it is possible to call the code blocks within
  an Emacs buffer, so we can actually start prototyping using Org mode.
  Each time we press &lt;code&gt;C-c C-c&lt;/code&gt; on top of the code block, the results
  would be refreshed:&lt;/p&gt;
&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;*** Notes on how to get the results&lt;/span&gt;

We could use something simple like:

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+begin_src ruby :results output code&lt;/span&gt;
s = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&amp;lt;&amp;lt;VARS&lt;/span&gt;
&lt;span style=&quot;color: #E6DB74;&quot;&gt;Uptime:&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;#{`uptime`}&lt;/span&gt;

&lt;span style=&quot;color: #E6DB74;&quot;&gt;ESTABLISHED connections:&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;#{`netstat -an | grep ESTABLISHED | wc -l`}&lt;/span&gt;

&lt;span style=&quot;color: #E6DB74;&quot;&gt;VARS&lt;/span&gt;

puts s
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+end_src&lt;/span&gt;

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+RESULTS:&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC ruby&lt;/span&gt;
&lt;span style=&quot;color: #66D9EF;&quot;&gt;Uptime&lt;/span&gt;:
22&lt;span style=&quot;color: #AE81FF;&quot;&gt;:23&lt;/span&gt;  up 4 days, 11&lt;span style=&quot;color: #AE81FF;&quot;&gt;:34&lt;/span&gt;, 5 users, load averages: 0.58 0.46 0.30


&lt;span style=&quot;color: #66D9EF;&quot;&gt;ESTABLISHED&lt;/span&gt; connections:
       8


&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;
&lt;/pre&gt;
&lt;h4&gt;Using &lt;code&gt;:tangle&lt;/code&gt; to create the files of the program&lt;/h4&gt;
&lt;p&gt;We can have a code block be &lt;i&gt;tangled&lt;/i&gt; into a file by using the
  &lt;code&gt;:tangle&lt;/code&gt; switch argument.  For example, we can define the &lt;code&gt;Gemfile&lt;/code&gt;
  and &lt;code&gt;config.ru&lt;/code&gt; files within an Org mode buffer like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;Dependencies from the app, just sinatra and webrick &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the server is ok &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;now.

&lt;span class=&quot;c&quot;&gt;#+BEGIN_SRC ruby :tangle src/Gemfile&lt;/span&gt;
gem &lt;span class=&quot;s1&quot;&gt;&amp;#39;sinatra&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#+END_SRC&lt;/span&gt;

Needed to start the Sinatra application:

&lt;span class=&quot;c&quot;&gt;#+BEGIN_SRC ruby :tangle src/config.ru&lt;/span&gt;
require &lt;span class=&quot;s1&quot;&gt;&amp;#39;./app.rb&amp;#39;&lt;/span&gt;
run Sinatra::Application
&lt;span class=&quot;c&quot;&gt;#+END_SRC&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Full example&lt;/h4&gt;
&lt;p&gt;The Sinatra application would then look something like this.
  From Emacs, we can either press &lt;code&gt;C-c C-v t&lt;/code&gt; or &lt;code&gt;C-c C-v C-t&lt;/code&gt;,
  (&lt;code&gt;M-x org-babel-tangle&lt;/code&gt; also does it) to tangle the web of
  code blocks to their respective files.&lt;/p&gt;
&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #b3b3b3;&quot;&gt;#+TITLE:&lt;/span&gt; &lt;span style=&quot;color: #cafe12; font-size: 144%; font-weight: bold;&quot;&gt;Monitoring HTTP endpoint&lt;/span&gt;

  This is a simple Sinatra application that provides
  the following endpoints:

  &amp;hyphen; &lt;span style=&quot;color: #cafe12; font-weight: bold;&quot;&gt;=/=&lt;/span&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;        ::&lt;/span&gt; which responds &lt;span style=&quot;color: #cafe12;&quot;&gt;=OK=&lt;/span&gt; in case all is good with the server.
  &amp;hyphen; &lt;span style=&quot;color: #cafe12; font-weight: bold;&quot;&gt;=/vars=&lt;/span&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;    ::&lt;/span&gt; to get info about the system

  &lt;span style=&quot;color: #F92672;&quot;&gt;** Bootstrapping the app&lt;/span&gt;

  &lt;span style=&quot;color: #A6E22E;&quot;&gt;*** Gemfile&lt;/span&gt;

  Dependencies from the app, just sinatra and webrick for now is ok.

  &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC ruby :tangle src/Gemfile&lt;/span&gt;
  gem &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;sinatra&#39;&lt;/span&gt;
  &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;

  &lt;span style=&quot;color: #A6E22E;&quot;&gt;*** Config.ru&lt;/span&gt;

  Needed to start the sinatra application

  &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC ruby :tangle src/config.ru&lt;/span&gt;
  require &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;./app.rb&#39;&lt;/span&gt;
  run &lt;span style=&quot;color: #66D9EF;&quot;&gt;Sinatra&lt;/span&gt;::&lt;span style=&quot;color: #66D9EF;&quot;&gt;Application&lt;/span&gt;
  &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;

  &lt;span style=&quot;color: #F92672;&quot;&gt;** The App&lt;/span&gt;

  &lt;span style=&quot;color: #A6E22E;&quot;&gt;*** Import dependencies&lt;/span&gt;

  &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC ruby :tangle src/app.rb&lt;/span&gt;

  require &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;sinatra&#39;&lt;/span&gt;

  &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;

  &lt;span style=&quot;color: #A6E22E;&quot;&gt;*** &lt;/span&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;=/=&lt;/span&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt; endpoint&lt;/span&gt;

  Just respond with &lt;span style=&quot;color: #cafe12;&quot;&gt;=OK=&lt;/span&gt;.

  &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC ruby :tangle src/app.rb&lt;/span&gt;
  get &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;/&#39;&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;do&lt;/span&gt;
  &lt;span style=&quot;color: #E6DB74;&quot;&gt;&amp;nbsp;&amp;nbsp;&#39;OK&#39;&lt;/span&gt;
  &lt;span style=&quot;color: #66D9EF;&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;

  &lt;span style=&quot;color: #A6E22E;&quot;&gt;*** &lt;/span&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;=/vars=&lt;/span&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt; endpoint&lt;/span&gt;

  Respond with info about the system:

  &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC ruby :tangle src/app.rb&lt;/span&gt;
  get &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;/vars&#39;&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;do&lt;/span&gt;

  r = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&amp;lt;&amp;lt;VARS&lt;/span&gt;
  &lt;span style=&quot;color: #E6DB74;&quot;&gt;Uptime:&lt;/span&gt;
  &lt;span style=&quot;color: #F92672;&quot;&gt;#{`uptime`}&lt;/span&gt;

  &lt;span style=&quot;color: #E6DB74;&quot;&gt;ESTABLISHED connections:&lt;/span&gt;
  &lt;span style=&quot;color: #F92672;&quot;&gt;#{`netstat -an | grep ESTABLISHED | wc -l`}&lt;/span&gt;

  &lt;span style=&quot;color: #E6DB74;&quot;&gt;VARS&lt;/span&gt;

  r
  &lt;span style=&quot;color: #66D9EF;&quot;&gt;end&lt;/span&gt;
  &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;
&lt;/pre&gt;

&lt;h3&gt;Running it&lt;/h3&gt;
&lt;p&gt;Now that, we have defined the program, it would be also helpful to
  define how to actually run it.  We will write this in a &lt;code&gt;org/run.org&lt;/code&gt;
  file.
  Note how we are including the &lt;code&gt;org/app.org&lt;/code&gt; application as a
  dependency so that in case of changes those code blocks become tangled
  as well.&lt;/p&gt;
&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #b3b3b3;&quot;&gt;#+TITLE:&lt;/span&gt;   &lt;span style=&quot;color: #cafe12; font-size: 144%; font-weight: bold;&quot;&gt;Running the Application&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+include: &quot;org/app.org&quot;&lt;/span&gt;

&lt;span style=&quot;color: #F92672;&quot;&gt;** Run it&lt;/span&gt;

To run it, we will need to get the dependencies first,
and then start it with bundler:

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+name: server&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC sh :dir src&lt;/span&gt;
bundle install
bundle exec rackup
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;

Now let&#39;s send some requests to it:

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+name: curl&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+BEGIN_SRC sh :wait 1&lt;/span&gt;
&lt;span style=&quot;color: #66D9EF;&quot;&gt;while&lt;/span&gt; true; &lt;span style=&quot;color: #66D9EF;&quot;&gt;do&lt;/span&gt; 
  curl 127.0.0.1:9292/vars 2&amp;gt; /dev/null
  sleep 1
&lt;span style=&quot;color: #66D9EF;&quot;&gt;done&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;#+END_SRC&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Here we are giving the code block a &lt;code&gt;#+name:&lt;/code&gt;, doing this make it
  possible to reuse the code block later on.  I made a small gem that
  makes it possible to run these kind of blocks when they have a name.&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
gem install org-converge
org-run org/run.org
&lt;/pre&gt;
&lt;p&gt;The output would look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;org-run org/run.org
...
Running code blocks now! (2 runnable blocks found in total)
server    -- started with pid 71840
curl      -- started with pid 71841
server    -- Using rack 1.5.2
server    -- Using rack-protection 1.5.3
server    -- Using tilt 1.4.1
server    -- Using sinatra 1.4.5
server    -- Using bundler 1.7.1
server    -- Your bundle is complete!
server    -- Use `bundle show [gemname]` to see where a bundled gem is installed.
server    -- [2014-12-11 22:56:42] INFO  WEBrick 1.3.1
server    -- [2014-12-11 22:56:42] INFO  ruby 2.1.2 (2014-05-08) [x86_64-darwin11.0]
server    -- [2014-12-11 22:56:42] INFO  WEBrick::HTTPServer#start: pid=71848 port=9292
server    -- 127.0.0.1 - - [11/Dec/2014 22:56:42] &amp;quot;GET /vars HTTP/1.1&amp;quot; 200 110 0.0527
curl      -- Uptime:
curl      -- 22:56  up 4 days, 12:07, 5 users, load averages: 0.78 0.84 0.76
curl      -- 
curl      -- 
curl      -- ESTABLISHED connections:
curl      --       12
curl      -- 
curl      -- 
server    -- 127.0.0.1 - - [11/Dec/2014 22:56:43] &amp;quot;GET /vars HTTP/1.1&amp;quot; 200 110 0.0210
curl      -- Uptime:
curl      -- 22:56  up 4 days, 12:07, 5 users, load averages: 0.78 0.84 0.76
curl      -- 
curl      -- 
curl      -- ESTABLISHED connections:
curl      --       12
curl      -- 
curl      -- 
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Final remarks&lt;/h3&gt;
&lt;p&gt;I think there is a lot of potential in the approach from Org mode
  for Literate Programming, so it is worth a try.
  Take a look at the concepts exposed by Knuth in his &lt;a href=&quot;http://www.literateprogramming.com/knuthweb.pdf&quot;&gt;paper&lt;/a&gt; on the
  matter, and you will find out that the core ideas about LP have not
  shown its age.&lt;/p&gt;
&lt;p&gt;These days, most of my development starts from an Org mode buffer
  and it just continues there.  With Org mode, you can basically start with a Readme
  (c.f. &lt;i&gt;Readme Driven Development&lt;/i&gt;), and then just contine doing the
  full implementation of your source there in the same place, along with
  your notes (but which are not exported).&lt;/p&gt;
&lt;p&gt;At the same time, it makes up for very useful documentation for others
  to pick up a project later on.
  And also Org mode file rendering is supported by Github!  In case of bugs,
  please send me a &lt;a href=&quot;https://github.com/wallyqs/org-ruby&quot;&gt;ticket here&lt;/a&gt;.&lt;/p&gt;


</content>
 </entry>
 
 <entry>
   <title>The Eternal Recurrence of PaaS</title>
   <link href="/posts/2014/12/08/eternal-recurrence-of-paas/"/>
   <updated>2014-12-08T00:00:00+09:00</updated>
   <id>/posts/2014/12/08/eternal-recurrence-of-paas</id>
   <content type="html">
&lt;p&gt;Distributed Systems are hard.&lt;/p&gt;
&lt;p&gt;As a service grows popular, there inevitably comes the time that capability to &lt;b&gt;scale&lt;/b&gt; is demanded from
  a system, and while doing so it is required that the system has &lt;b&gt;uptime&lt;/b&gt;.
  As we go on tackling such issues, it results that we end up with a
  distributed system that becomes increasingly complex and its
  understanding requires an ongoing online computation of its state.&lt;/p&gt;
&lt;p&gt;Under such a system, failures are a constant, and whether this failure
  ends up in tragedy or not, depends on how well the platform developer
  was prepared for such events.&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;/public/cat-theorem.png&quot; alt=&quot;/public/cat-theorem.png&quot; /&gt;&lt;/p&gt;
  &lt;p&gt;&lt;b&gt;Fig. 1.&lt;/b&gt; &lt;i&gt;The CAT theorem&lt;/i&gt; (coined by &lt;a href=&quot;http://www.schwertly.com/&quot;&gt;Stan&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Then, what if while at handling this complexity, or a tragic event that ends up in firefighting,
  (&lt;i&gt;in your loneliest loneliness&lt;/i&gt; as Nietzche puts it),
  a demon came up to you and reveal that it doesn&amp;#8217;t
  get any better? That &lt;a href=&quot;http://queue.acm.org/detail.cfm?id=2482856&quot;&gt;there is no way around it&lt;/a&gt;,
  and &amp;#8221;&lt;i&gt;this life which you live must be lived by you once again and innumerable times more; and every pain and joy and thought and sigh must come again to you, all in the same sequence&lt;/i&gt;&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Nietzche poses as the outcome of this thought experiment
  one out of two possible choices: the individual either accepts it and becomes stronger
  from the cognitive process triggered as a result of the tragedy (&lt;i&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Amor_fati&quot;&gt;amor fati&lt;/a&gt;&lt;/i&gt;),
  or the individual succumbs to what he calls &lt;i&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Ressentiment&quot;&gt;Ressentiment&lt;/a&gt;&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;The platform developer, by attempting to build and operate a
  distributed system, will continuously be exposed to a set of challenges
  that will end up with having to face this test of character.&lt;/p&gt;
&lt;p&gt;Such as in life (which is itself some sort of distributed system too),
  in a distributed system, tragedy is a constant.  The &lt;a href=&quot;http://en.wikipedia.org/wiki/CAP_theorem&quot;&gt;CAP theorem&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://en.wikipedia.org/wiki/Consensus_%28computer_science%29#Solvability_results_for_some_agreement_problems&quot;&gt;FPL result&lt;/a&gt;,
  are just a couple of examples which show the constant tragedy that comes
  along with operating distributed systems.&lt;/p&gt;
&lt;p&gt;For the platform developer that does not succumb to ressentiment, what
  lies ahead is easy to predict: it will reflect on the tragedy and use
  the literature to improve the situation and in the end, succeed like
  others have before in taming a system with many moving parts without
  shying away from the difficult problems.  Tackling and understanding the
  tradeoffs around fault tolerance, high availability, distributed
  agreement, etc&amp;#8230; all lead to a living a good life for the platform
  developer.&lt;/p&gt;
&lt;p&gt;But what about the platform developer that succumbs to &lt;i&gt;ressentiment&lt;/i&gt;?&lt;/p&gt;
&lt;p&gt;Like the quote from Tolstoy goes:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;All happy families are alike; each unhappy family is unhappy in its own way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In my experience (and under my line of reasoning stated in the previous
  paragraphs), when such thing happens it could be possible to see some
  of the following behaviors below for example:&lt;/p&gt;
&lt;h6&gt;Cynism, Skepticism&lt;/h6&gt;
&lt;p&gt;We can avoid having to scale by keeping services small.
  Instead of having shared infrastructure we could make everyone in the company run
  a similar version of the same, then &lt;i&gt;they&lt;/i&gt; have to take care of
  running it.  There is no need to have a platform even if we have
  hundreds of nodes.&lt;/p&gt;
&lt;p&gt;This platform developer has experienced the pains of having to operate
  a distributed system.  Microservices &lt;a href=&quot;http://martinfowler.com/bliki/MicroservicePrerequisites.html&quot;&gt;are&lt;/a&gt; &lt;a href=&quot;http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html&quot;&gt;hard&lt;/a&gt;, and maybe unnecessary if
  complying to enough trade offs. It is ok to be uncompetitive in
  terms of platform related efforts and just keeping it simple.&lt;/p&gt;
&lt;p&gt;The platform developer keeps the level of automation such that there
  is heavy partitioning and waste in the data center and tries to delegate
  difficult issues to avoid tragedies around operating a complex system.&lt;/p&gt;
&lt;h6&gt;The sysadmin as practitioner of a slave morality&lt;/h6&gt;
&lt;p&gt;A developer either aware or unaware of the challenges of having to run
  a distributed system may try to shield himself/herself of the issue.&lt;/p&gt;
&lt;p&gt;As a result of the lack of empathy by the developer,
  a platform developer may develop &lt;i&gt;ressentiment&lt;/i&gt; towards the opressors,
  that is the developers who lack empathy to the problem of tackling
  scalability issues.&lt;/p&gt;
&lt;h6&gt;&amp;#8220;Hell is other developers&amp;#8221;&lt;/h6&gt;
&lt;p&gt;&lt;i&gt;Ressentiment&lt;/i&gt; is to those that do not understand the situation in the
  the data center, and to those heavy users who are causing the architecture
  continue to grow.&lt;/p&gt;
&lt;p&gt;The problem is not the platform, but the architecture of the application.
  Had the application architechture been designed properly there wouldn&amp;#8217;t be a need to have as many servers.&lt;/p&gt;
&lt;p&gt;Or there could be &lt;i&gt;ressentiment&lt;/i&gt; as well to those users who for analytics purposes capture everything and produce lots of data.
  In case it is for auditing purposes, &lt;i&gt;ressentiment&lt;/i&gt; then is towards those who audit.&lt;/p&gt;
&lt;p&gt;The platform developer becomes more used to externalize issues that
  could be fixed in the platform on the users rather than fixing them.&lt;/p&gt;
&lt;h5&gt;Conclusion&lt;/h5&gt;
&lt;p&gt;It is my believe then that, compared to other areas of software
  development, there is a &lt;i&gt;Tragic Sense of Life&lt;/i&gt; which
  has to be acknowledged earlier on when faced with operating
  a distributed system running in production, that is if one is set to the task of doing it correctly.&lt;/p&gt;
&lt;p&gt;It is also my believe that even after much tragedy, a platform developer
  with ressentiment still has chance to overcome it and attempt to
  tackle the core issues of building a distributed system.
  It takes start asking &amp;#8220;Why?&amp;#8221; and then proceed to start reading papers,
  looking for someone else that has posed the same question
  (many times these fundamental questions already have been answered &lt;a href=&quot;http://web.stanford.edu/class/cs240/readings/lamport.pdf&quot;&gt;decades ago&lt;/a&gt;&amp;#8230;)&lt;/p&gt;
&lt;h5&gt;Links&lt;/h5&gt;
&lt;p&gt;Some links that have helped me out learning about distributed systems:&lt;/p&gt;
&lt;dl&gt;
  &lt;dt&gt;Distributed Systems for fun and profit&lt;/dt&gt;&lt;dd&gt;
    I have found this book very useful to immerse in the basics of
    working with distributed systems.
    &lt;a href=&quot;http://book.mixu.net/distsys/&quot;&gt;http://book.mixu.net/distsys/&lt;/a&gt;&lt;/dd&gt;
  &lt;dt&gt;&lt;i&gt;Distributed Systems Archaeology&lt;/i&gt; talk by Michael Bernstein&lt;/dt&gt;&lt;dd&gt;
    Another great talk by a man with an obsession which I can&amp;#8217;t
    recommend enough.
    &lt;a href=&quot;http://michaelrbernste.in/2013/11/22/distributed-systems-archaeology.html&quot;&gt;http://michaelrbernste.in/2013/11/22/distributed-systems-archaeology.html&lt;/a&gt;&lt;/dd&gt;
  &lt;dt&gt;Papers we love&lt;/dt&gt;&lt;dd&gt;
    There are many great distributed systems related videos of the meetups available
    &lt;a href=&quot;http://paperswelove.org/&quot;&gt;http://paperswelove.org/&lt;/a&gt;&lt;/dd&gt;
  &lt;dt&gt;A Brief Tour of FLP Impossibility&lt;/dt&gt;&lt;dd&gt;
    TL;DR;
    &amp;#8220;it’s not possible to say whether a processor has crashed or is simply taking a long time to respond.&amp;#8221;
    &lt;a href=&quot;http://the-paper-trail.org/blog/a-brief-tour-of-flp-impossibility/&quot;&gt;http://the-paper-trail.org/blog/a-brief-tour-of-flp-impossibility/&lt;/a&gt;&lt;/dd&gt;
  &lt;dt&gt;The CAP Theorem&lt;/dt&gt;&lt;dd&gt;
    Paper itself can be found at Papers we love &lt;a href=&quot;https://github.com/papers-we-love/papers-we-love/blob/master/distributed_systems/brewers-conjecture.pdf&quot;&gt;repo&lt;/a&gt;. But
    the Distributed Systems for fun and profit book covers it in the
    &lt;a href=&quot;http://book.mixu.net/distsys/abstractions.html&quot;&gt;chapter 2&lt;/a&gt; as well.&lt;/dd&gt;
  &lt;dt&gt;Distributed systems theory for the distributed systems engineer&lt;/dt&gt;&lt;dd&gt;
    Great compilation of links
    &lt;a href=&quot;http://the-paper-trail.org/blog/distributed-systems-theory-for-the-distributed-systems-engineer/&quot;&gt;http://the-paper-trail.org/blog/distributed-systems-theory-for-the-distributed-systems-engineer/&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;


</content>
 </entry>
 
 <entry>
   <title>Gradually adopting Org mode, part 1</title>
   <link href="/posts/2014/12/04/using-org-babel/"/>
   <updated>2014-12-04T00:00:00+09:00</updated>
   <id>/posts/2014/12/04/using-org-babel</id>
   <content type="html">
&lt;p&gt;Like most Org mode users, I started using Org mode as a TODO list.
  Though for a while now, the Org Babel mode has become an intrinsic
  part of my flow as well, to the point that outside doing code reading
  of other projects, I rarely visit files anymore and spend most of my
  time within Org mode buffers.&lt;/p&gt;
&lt;p&gt;In this post I will attempt to document such progression to this style
  of using Org mode, and should also serve as a kind of tutorial for
  those without familiarity to Org mode.&lt;/p&gt;
&lt;h4&gt;Basic elements of Org mode&lt;/h4&gt;
&lt;p&gt;Org mode has a &lt;i&gt;ton&lt;/i&gt; of features, so rather than explaining
  each one of the features of Org mode, I will describe what
  are the building blocks that we can choose from
  when authoring an Org mode document.&lt;/p&gt;
&lt;p&gt;Some of the most basic elements of an Org mode document are:&lt;/p&gt;
&lt;dl&gt;
  &lt;dt&gt;Org mode markup paragraphs&lt;/dt&gt;&lt;dd&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;Similar to other markup languages, we can write text in /italics/, *bold*, 
_underline_, =code= or ~verbatim~, and even super and subscript: n_1, n^2
&lt;/pre&gt;&lt;/div&gt;
  &lt;/dd&gt;
  &lt;dt&gt;headlines and sections&lt;/dt&gt;&lt;dd&gt;
    &lt;p&gt;A section in Org mode is started by a headline. Headlines start
      with one or more asterisks.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;* A headline

Paragraph within a /headline/ 
&lt;/pre&gt;&lt;/div&gt;
    &lt;p&gt;We can set a TODO state to a headline to define whether something
      is done or not:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;* TODO Need to do this!
* DONE Needed to do this!
&lt;/pre&gt;&lt;/div&gt;
  &lt;/dd&gt;
  &lt;dt&gt;blocks&lt;/dt&gt;&lt;dd&gt;
    &lt;p&gt;A block is how we group together a bunch of lines that are not
      meant to be only paragraphs.  Some of the builtin blocks that we can have
      in Org mode are: src, example, verse, quote and html.&lt;/p&gt;
    &lt;p&gt;A block will start &lt;code&gt;#+begin_...&lt;/code&gt; and end with &lt;code&gt;#+end_...&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;One of the coolest features of the Org mode code blocks is that
      we can add metadata to them, such as which kind of language is
      being used inside of it (in case of src an example code blocks).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;#+begin_src ruby
&amp;quot;Hello world&amp;quot;
#+end_src
&lt;/pre&gt;&lt;/div&gt;
    &lt;p&gt;In order for syntax highlighting to work, it is needed to include
      the following in the Emacs configuration file (or just eval it
      during boot):&lt;/p&gt;
    &lt;pre class=&quot;example&quot;&gt;
(setq org-src-fontify-natively t)
    &lt;/pre&gt;
    &lt;p&gt;It is also required that the Emacs install has the special mode
      for it.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;lists&lt;/dt&gt;&lt;dd&gt;
    &lt;p&gt;A list can be an unordered, ordered or definition list:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;   - first level

     Org mode /markup/

     + second level
       1) third level
          1. fourth level
   - back to first level
     + a definition list :: 
	   some definition
&lt;/pre&gt;&lt;/div&gt;
    &lt;p&gt;By putting empty brackets  &lt;code&gt;[ ]&lt;/code&gt;, &lt;code&gt;[/]&lt;/code&gt;, or &lt;code&gt;[%]&lt;/code&gt; at the beginning of a list, it
      can become a task list.  Pressing &lt;code&gt;C-c C-C&lt;/code&gt; on an item would
      update its value:&lt;/p&gt;
    &lt;p&gt;Before:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;- [0/1] one
  + [ ] two 
- [0%] three
  * [ ] four
&lt;/pre&gt;&lt;/div&gt;
    &lt;p&gt;After:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;- [1/1] one
  + [X] two 
- [100%] three
  * [X] four
&lt;/pre&gt;&lt;/div&gt;
  &lt;/dd&gt;
  &lt;dt&gt;tables&lt;/dt&gt;&lt;dd&gt;
    An Org mode table:
     &lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #87cefa;&quot;&gt;| apples  | 10 |&lt;/span&gt;
     &lt;span style=&quot;color: #87cefa;&quot;&gt;| oranges | 20 |&lt;/span&gt;
     &lt;/pre&gt;
    &lt;p&gt;Tables in Org mode are very powerful.  They are not meant to be
      only for authoring tables, but they have spreadsheet
      functionality as well.  The following table would have its formulas
      evaluated after pressing TAB on it:&lt;/p&gt;
    &lt;p&gt;Before:&lt;/p&gt;
     &lt;pre class=&quot;src src-org&quot;&gt;  &lt;span style=&quot;color: #87cefa;&quot;&gt;| fruit   |      quantity | price per fruit | COST          |&lt;/span&gt;
     &lt;span style=&quot;color: #87cefa;&quot;&gt;| apples  |            10 |               5 | &lt;/span&gt;&lt;span style=&quot;color: #ff7f24;&quot;&gt;=$2 * $3      &lt;/span&gt;&lt;span style=&quot;color: #87cefa;&quot;&gt;|&lt;/span&gt;
     &lt;span style=&quot;color: #87cefa;&quot;&gt;| oranges |            20 |               7 | &lt;/span&gt;&lt;span style=&quot;color: #ff7f24;&quot;&gt;=$2 * $3      &lt;/span&gt;&lt;span style=&quot;color: #87cefa;&quot;&gt;|&lt;/span&gt;
     &lt;span style=&quot;color: #87cefa;&quot;&gt;| TOTAL   | &lt;/span&gt;&lt;span style=&quot;color: #ff7f24;&quot;&gt;=vsum(@2..@3) &lt;/span&gt;&lt;span style=&quot;color: #87cefa;&quot;&gt;|                 |               |&lt;/span&gt;
     &lt;/pre&gt;
    &lt;p&gt;After:&lt;/p&gt;
     &lt;pre class=&quot;src src-org&quot;&gt;  &lt;span style=&quot;color: #87cefa;&quot;&gt;| fruit   |      quantity | price per fruit | COST     |&lt;/span&gt;
     &lt;span style=&quot;color: #87cefa;&quot;&gt;| apples  |            10 |               5 | 50       |&lt;/span&gt;
     &lt;span style=&quot;color: #87cefa;&quot;&gt;| oranges |            20 |               7 | 140      |&lt;/span&gt;
     &lt;span style=&quot;color: #87cefa;&quot;&gt;| TOTAL   |            30 |                 |          |&lt;/span&gt;
     &lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;  #+TBLFM: $2=vsum(@2..@3)::$4=$2 * $3&lt;/span&gt;
     &lt;/pre&gt;
  &lt;/dd&gt;
&lt;/dl&gt;
&lt;h5&gt;Basic usage of Org mode for TODO lists&lt;/h5&gt;
&lt;p&gt;At the beginning of my Org mode usage, my documents used to look like
  this I think:&lt;/p&gt;
&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #66D9EF; font-style: italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color: #ff0000; font-weight: bold;&quot;&gt;TODO&lt;/span&gt;&lt;span style=&quot;color: #66D9EF; font-style: italic;&quot;&gt; Reply email from Alice&lt;/span&gt;

&lt;span style=&quot;color: #F92672;&quot;&gt;** &lt;/span&gt;&lt;span style=&quot;color: #ff0000; font-weight: bold;&quot;&gt;TODO&lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt; Reply&lt;/span&gt;

Dear Alice...

&lt;span style=&quot;color: #66D9EF; font-style: italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color: #ff0000; font-weight: bold;&quot;&gt;TODO&lt;/span&gt;&lt;span style=&quot;color: #66D9EF; font-style: italic;&quot;&gt; Capacity planning&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;One of the features I first adopted is the use of &lt;code&gt;CLOCKS&lt;/code&gt;.
  You can start a clock by pressing: &lt;code&gt;C-c C-x TAB&lt;/code&gt;,
  then we you are done you clock out with &lt;code&gt;C-c C-x C-o&lt;/code&gt;.
  Then you can use  &lt;code&gt;C-c C-x C-d&lt;/code&gt; to check the total time spent.&lt;/p&gt;
&lt;pre class=&quot;src src-org&quot;&gt;  * DONE Reply email from Alice
    &lt;span style=&quot;color: #66D9EF;&quot;&gt;CLOCK:&lt;/span&gt; &lt;span style=&quot;color: #00ffff; text-decoration: underline;&quot;&gt;[2014-12-04 Thu 15:45]--[2014-12-04 Thu 15:50]&lt;/span&gt; =&amp;gt;  0:05

  ,** DONE Reply
     &lt;span style=&quot;color: #66D9EF;&quot;&gt;CLOCK:&lt;/span&gt; &lt;span style=&quot;color: #00ffff; text-decoration: underline;&quot;&gt;[2014-12-04 Thu 16:00]--[2014-12-04 Thu 17:00]&lt;/span&gt; =&amp;gt;  1:00

  Dear Alice...

  ,* TODO Capacity planning
&lt;/pre&gt;
&lt;p&gt;Another helpful feature is &lt;i&gt;narrowing down&lt;/i&gt; to a headline so that
  other headlines are not shown. This can be done by pressing &lt;code&gt;C-x n s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Having covered these basic I&amp;#8217;ll go on to talk about Org Babel.&lt;/p&gt;
&lt;h4&gt;Start using Org mode for reproducible documents&lt;/h4&gt;
&lt;p&gt;The key thing about when using Org mode and for literate programming
  is when you care about making things reproducible.&lt;/p&gt;
&lt;p&gt;Eric Schulte paper has more background on how the project started: &lt;a href=&quot;http://www.jstatsoft.org/v46/i03&quot;&gt;http://www.jstatsoft.org/v46/i03&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In order to use Org Babel we first need to enable it.  This is how my
  &lt;code&gt;.emacs&lt;/code&gt; looks for this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-src-fontify-natively&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-confirm-babel-evaluate&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;org-babel-do-load-languages&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;&amp;#39;org-babel-load-languages&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;emacs-lisp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clojure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;haskell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scala&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that in order for the above to work, there have to be major modes
  in Emacs for those specific languages. Comment out or remove the
  language that is not on your setup.&lt;/p&gt;
&lt;h5&gt;Making the document active by giving things a name&lt;/h5&gt;
&lt;p&gt;To adopt Org mode literate programming mode, we need to start
  using &lt;code&gt;#+name&lt;/code&gt; on top of some Org mode elements.  By doing this,
  it is possible to reference later on to that part of the document.&lt;/p&gt;
&lt;p&gt;For example we can have a code block and eval it with &lt;code&gt;C-c C-c&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;  #+BEGIN_SRC ruby&lt;/span&gt;
  1 + 1
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;  #+END_SRC&lt;/span&gt;

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;  #+RESULTS:&lt;/span&gt;
  &lt;span style=&quot;color: #b3b3b3;&quot;&gt;: 2&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;But by giving it a name, we can reuse this code block:&lt;/p&gt;
&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;  #+name: sum&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;  #+BEGIN_SRC ruby :var arg1=1 :var arg2=2&lt;/span&gt;
  arg1 + arg2
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;  #+END_SRC&lt;/span&gt;

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;  #+RESULTS:&lt;/span&gt;
  &lt;span style=&quot;color: #b3b3b3;&quot;&gt;: 2&lt;/span&gt;

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;  #+call: sum(10, 100)&lt;/span&gt;

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;  #+RESULTS:&lt;/span&gt;
  &lt;span style=&quot;color: #b3b3b3;&quot;&gt;: 110&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Or chain it with a table:&lt;/p&gt;
&lt;pre class=&quot;src src-org&quot;&gt;&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;  #+name: fruits&lt;/span&gt;
  &lt;span style=&quot;color: #87cefa;&quot;&gt;| apples  | 10 |&lt;/span&gt;
  &lt;span style=&quot;color: #87cefa;&quot;&gt;| oranges | 20 |&lt;/span&gt;

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;  #+name: show-fruits&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;  #+BEGIN_SRC ruby :var fruitstable=fruits :results output code&lt;/span&gt;
  fruits = &lt;span style=&quot;color: #66D9EF;&quot;&gt;Hash&lt;/span&gt;[fruitstable]

  p fruits
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;  #+END_SRC&lt;/span&gt;

&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;  #+RESULTS: show-fruits&lt;/span&gt;
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;  #+BEGIN_SRC ruby&lt;/span&gt;
  {&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;apples&quot;&lt;/span&gt;=&amp;gt;10, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;oranges&quot;&lt;/span&gt;=&amp;gt;20}
&lt;span style=&quot;color: #465457; font-style: italic;&quot;&gt;  #+END_SRC&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;To be continued&amp;#8230;&lt;/p&gt;


</content>
 </entry>
 
 <entry>
   <title>Basic NATS</title>
   <link href="/posts/2014/11/17/basic-nats-client/"/>
   <updated>2014-11-17T00:00:00+09:00</updated>
   <id>/posts/2014/11/17/basic-nats-client</id>
   <content type="html">
&lt;p&gt;There aren&amp;#8217;t many docs out there on &lt;a href=&quot;http://nats.io/&quot;&gt;NATS&lt;/a&gt; even though it is
  so awesome (and &lt;a href=&quot;http://www.bravenewgeek.com/dissecting-message-queues/&quot;&gt;fast&lt;/a&gt;) so I thought I would share some notes
  on what it is needed to implement a basic client for NATS,
  (and maybe one day write a client for it&amp;#8230;)&lt;/p&gt;
&lt;h4&gt;Connecting and receiving INFO&lt;/h4&gt;
&lt;p&gt;Let&amp;#8217;s try a simple connecting test:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;msgcounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
nc 127.0.0.1 4222 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;msg&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;msgcounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;nv&quot;&gt;$msgcounter&lt;/span&gt; + 1&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$msgcounter :: &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see that as soon as we establish the connection, the server will respond with
  an &lt;code&gt;INFO&lt;/code&gt; message, and then after &lt;span style=&quot;text-decoration:underline;&quot;&gt;2 minutes&lt;/span&gt;, it will send its first &lt;code&gt;PING&lt;/code&gt; message
  to check the connection with the client.&lt;/p&gt;
&lt;p&gt;The server will try to send 3 more &lt;code&gt;PING&lt;/code&gt; messages to the client,
  and on the &lt;span style=&quot;text-decoration:underline;&quot;&gt;4th message&lt;/span&gt;, it will close the connection.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;[2014-11-16T14:17:12 -0500] run-nats-server -- 2014/11/16 14:17:12 [INFO] Starting gnatsd version 0.5.6
[2014-11-16T14:17:12 -0500] run-nats-server -- 2014/11/16 14:17:12 [INFO] Listening for client connections on 0.0.0.0:4222
[2014-11-16T14:17:12 -0500] run-nats-server -- 2014/11/16 14:17:12 [INFO] gnatsd is ready
[2014-11-16T14:17:12 -0500] client          -- 1 ::  INFO {&amp;quot;server_id&amp;quot;:&amp;quot;da9955fe007233fa724ec91a8978c44d&amp;quot;,&amp;quot;version&amp;quot;:&amp;quot;0.5.6&amp;quot;,&amp;quot;host&amp;quot;:&amp;quot;0.0.0.0&amp;quot;,&amp;quot;port&amp;quot;:4222,&amp;quot;auth_required&amp;quot;:false,&amp;quot;ssl_required&amp;quot;:false,&amp;quot;max_payload&amp;quot;:1048576} 
[2014-11-16T14:19:12 -0500] client          -- 2 ::  PING
[2014-11-16T14:21:12 -0500] client          -- 3 ::  PING
[2014-11-16T14:23:12 -0500] client          -- 4 ::  -ERR &amp;#39;Stale Connection&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;PING &amp;lt;-&amp;gt; PONG&lt;/h4&gt;
&lt;p&gt;After we have received the first &lt;code&gt;PING&lt;/code&gt;, it is needed to reply with another &lt;code&gt;PONG&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;To keep on using netcat for this examples, we will be relying on named
  pipes and a multiprocess run.  Then, we will be using the named pipe to feed
  the &lt;code&gt;PONG&lt;/code&gt; when we receive a &lt;code&gt;PING&lt;/code&gt; from NATS, otherwise the connection would be closed.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; -e nats-in &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; mkfifo nats-in
&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; -e nats-out &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; mkfifo nats-out

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Start client...&amp;quot;&lt;/span&gt;
nc 127.0.0.1 4222 &amp;lt;nats-in &amp;gt;nats-out &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# open nats-in for writing  on fd 3&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# open nats-out for reading on fd 4&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;3&amp;gt; nats-in 4&amp;lt;nats-out

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;msgcounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;msg &amp;lt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;4&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;GOT ::&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;msgcounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;nv&quot;&gt;$msgcounter&lt;/span&gt; + 1&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$msgcounter messages received&amp;quot;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# process ping&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -q PING &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;PONG&amp;quot;&lt;/span&gt; &amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;3 &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Sample output&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;gnatsd		-- [INFO] Starting gnatsd version 0.5.7
gnatsd		-- [INFO] Listening for client connections on 0.0.0.0:4222
gnatsd		-- [INFO] gnatsd is ready
nats-client	-- Start client..
gnatsd		-- [DEBUG] Client connection created%!(EXTRA *server.client=127.0.0.1:58790 - cid:1)
nats-client	-- 1 messages received
nats-client	-- GOT :: INFO {&amp;quot;server_id&amp;quot;:&amp;quot;93f5d02d3b613ec2f6135e4ffcee199a&amp;quot;,&amp;quot;version&amp;quot;:&amp;quot;0.5.7&amp;quot;,&amp;quot;host&amp;quot;:&amp;quot;0.0.0.0&amp;quot;,&amp;quot;port&amp;quot;:4222,&amp;quot;auth_required&amp;quot;:false,&amp;quot;ssl_required&amp;quot;:false,&amp;quot;max_payload&amp;quot;:1048576} 
gnatsd		-- [DEBUG] Client Ping Timer%!(EXTRA *server.client=127.0.0.1:58790 - cid:1)
nats-client    -- 2 messages received
nats-client    -- GOT :: PING
gnatsd		-- [DEBUG] Client Ping Timer%!(EXTRA *server.client=127.0.0.1:58790 - cid:1)
nats-client    -- 3 messages received
nats-client    -- GOT :: PING
gnatsd		-- [DEBUG] Client Ping Timer%!(EXTRA *server.client=127.0.0.1:58790 - cid:1)
nats-client    -- 4 messages received
nats-client    -- GOT :: PING
gnatsd		-- [DEBUG] Client Ping Timer%!(EXTRA *server.client=127.0.0.1:58790 - cid:1)
nats-client    -- 5 messages received
nats-client    -- GOT :: PING
gnatsd		-- [DEBUG] Client Ping Timer%!(EXTRA *server.client=127.0.0.1:58790 - cid:1)
nats-client    -- 6 messages received
nats-client    -- GOT :: PING
gnatsd		-- [DEBUG] Client Ping Timer%!(EXTRA *server.client=127.0.0.1:58790 - cid:1)
nats-client    -- 7 messages received
nats-client    -- GOT :: PING
gnatsd		-- [DEBUG] Client Ping Timer%!(EXTRA *server.client=127.0.0.1:58790 - cid:1)
nats-client    -- 8 messages received
nats-client    -- GOT :: PING
gnatsd		-- [DEBUG] Client Ping Timer%!(EXTRA *server.client=127.0.0.1:58790 - cid:1)
nats-client    -- 9 messages received
nats-client    -- GOT :: PING
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;PUB  &amp;lt;-&amp;gt; SUB&lt;/h4&gt;
&lt;p&gt;As we have seen, we need to constantly be sending &lt;code&gt;PING&lt;/code&gt;
  otherwise the server will close the connection.&lt;/p&gt;
&lt;p&gt;Now let&amp;#8217;s try creating a subscription!&lt;/p&gt;
&lt;p&gt;Another step that we need to handle is &lt;code&gt;CONNECT&lt;/code&gt;,
  so we do that before starting a subscription. After that,
  we subscribe to the &lt;code&gt;hello.world&lt;/code&gt; channel:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;CONNECT {&amp;quot;verbose&amp;quot;:false,&amp;quot;pedantic&amp;quot;:false}&amp;#39;&lt;/span&gt; &amp;gt; nats-in
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;SUB hello.world  2&amp;quot;&lt;/span&gt; &amp;gt; nats-in
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now if we try to send a message to this channel by &lt;code&gt;nats-pub&lt;/code&gt;&amp;#8230;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;nats-pub hello.world -s nats://127.0.0.1:4222 &amp;quot;hoge hoge&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;#8230;we get the following displayed on our netcat console:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2014-11-16T23:14:20 -0500&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; nats-client    -- GOT :: MSG hello.world 2 9
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2014-11-16T23:14:20 -0500&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; nats-client    -- GOT :: hoge hoge
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;9&lt;/code&gt; here represents the number of letters that were in the MSG.
  Now let&amp;#8217;s make them cooperate and send a &lt;code&gt;PUB&lt;/code&gt; that says &lt;code&gt;fuga fuga&lt;/code&gt;
  soon after it gets the first message:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; -e nats-in &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; mkfifo nats-in
&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; -e nats-out &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; mkfifo nats-out

&lt;span class=&quot;c&quot;&gt;# cat &amp;gt; nats-in&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Start client..&amp;quot;&lt;/span&gt;
nc 127.0.0.1 4222 &amp;lt;nats-in &amp;gt;nats-out &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# open nats-in for writing  on fd 3&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# open nats-out for reading on fd 4&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;3&amp;gt; nats-in 4&amp;lt;nats-out

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pingcounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;msg &amp;lt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;4&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pingcounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;nv&quot;&gt;$pingcounter&lt;/span&gt; + 1&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$pingcounter messages received&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;GOT :: $msg&amp;quot;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# As soon as we get INFO, send CONNECT and subscriptions&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -q INFO &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;CONNECT {&amp;quot;verbose&amp;quot;:false,&amp;quot;pedantic&amp;quot;:false}&amp;#39;&lt;/span&gt; &amp;gt; nats-in
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;SUB hello.world  2&amp;quot;&lt;/span&gt; &amp;gt; nats-in
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# respond to PING&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -q PING &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;PONG&amp;quot;&lt;/span&gt; &amp;gt; nats-in

  &lt;span class=&quot;c&quot;&gt;# respond to MSG hello.world&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -q &lt;span class=&quot;s2&quot;&gt;&amp;quot;MSG hello.world&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;PONG&amp;quot;&lt;/span&gt; &amp;gt; nats-in
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -ne &lt;span class=&quot;s1&quot;&gt;&amp;#39;PUB hello.world  9\r\nfuga fuga\r\n&amp;#39;&lt;/span&gt; &amp;gt; nats-in
    sleep 1
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;Using the special channel &amp;#8217;&lt;code&gt;&amp;gt;&lt;/code&gt;&amp;#8217;&lt;/h6&gt;
&lt;p&gt;Here we are subscribing to all channels by using &lt;code&gt;&amp;gt;&lt;/code&gt;,
  which is kind of a special channel to match all:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;CONNECT {&amp;quot;verbose&amp;quot;:false,&amp;quot;pedantic&amp;quot;:false}&amp;#39;&lt;/span&gt; &amp;gt; nats-in
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;SUB &amp;gt;  2&amp;quot;&lt;/span&gt; &amp;gt; nats-in
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Replying to an &lt;code&gt;INBOX&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Once having covered subscriptions and publishing,
  we can try creating an &lt;code&gt;_INBOX&lt;/code&gt; to support requests.&lt;/p&gt;
&lt;p&gt;Agents subscribed to the channel will get this message
  and respond to to it, but from the client side it is
  possible to stop receiving once we got enough.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;$ nats-request hello.world -s nats://127.0.0.1:4222 -n 1

SUB _INBOX.46bdca94dd22f452e836b5e1f6  2\r\n&amp;quot;
PUB hello.world _INBOX.46bdca94dd22f452e836b5e1f6 11\r\nHello World\r\n&amp;quot;

[#1] Replied with : &amp;#39;trying to help&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And in our client we handle it as&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
MSG hello.world 2 _INBOX.e16d52026b72575471357cc17d 11
&lt;/pre&gt;
&lt;p&gt;The client for this would look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; -e nats-in &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; mkfifo nats-in
&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; -e nats-out &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; mkfifo nats-out

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Start client..&amp;quot;&lt;/span&gt;
nc 127.0.0.1 4222 &amp;lt;nats-in &amp;gt;nats-out &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# open nats-in for writing  on fd 3&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# open nats-out for reading on fd 4&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;3&amp;gt; nats-in 4&amp;lt;nats-out

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pingcounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
cat nats-out &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;msg&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pingcounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;nv&quot;&gt;$pingcounter&lt;/span&gt; + 1&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$pingcounter messages received&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;GOT :: $msg&amp;quot;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# As soon as we get INFO, send CONNECT and subscriptions&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -q INFO &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;CONNECT {&amp;quot;verbose&amp;quot;:false,&amp;quot;pedantic&amp;quot;:false}&amp;#39;&lt;/span&gt; &amp;gt; nats-in
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;SUB hello.world  2&amp;quot;&lt;/span&gt; &amp;gt; nats-in
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# respond to PING&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -q PING &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;PONG&amp;quot;&lt;/span&gt; &amp;gt; nats-in

  &lt;span class=&quot;c&quot;&gt;# respond to MSG hello.world&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -q &lt;span class=&quot;s2&quot;&gt;&amp;quot;MSG hello.world&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;PONG&amp;quot;&lt;/span&gt; &amp;gt; nats-in
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -ne &lt;span class=&quot;s2&quot;&gt;&amp;quot;PUB hello.world  9\r\nfuga fuga\r\n&amp;quot;&lt;/span&gt; &amp;gt; nats-in
    sleep 1
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# process MSG hello.world requests&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -q &lt;span class=&quot;s2&quot;&gt;&amp;quot;^MSG hello.world..._INBOX&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;PONG&amp;quot;&lt;/span&gt; &amp;gt; nats-in
    &lt;span class=&quot;nv&quot;&gt;inbox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;{print $4}&amp;#39;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -ne &lt;span class=&quot;s2&quot;&gt;&amp;quot;PUB $inbox 14\r\ntrying to help\r\n&amp;quot;&lt;/span&gt; &amp;gt; nats-in
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;#8230;which makes up for an extremely basic version of a NATS client :)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;gnatsd		-- [DEBUG] Client Ping Timer%!(EXTRA *server.client=127.0.0.1:58802 - cid:7)
nats-client	-- 134 messages received
nats-client	-- GOT :: fuga fuga
nats-client	-- 135 messages received
nats-client	-- GOT :: MSG hello.world 2 9
gnatsd		-- [DEBUG] Client Ping Timer%!(EXTRA *server.client=127.0.0.1:58790 - cid:1)
nats-client	-- 136 messages received
nats-client	-- GOT :: fuga fuga
nats-client	-- 137 messages received
&lt;/pre&gt;&lt;/div&gt;


</content>
 </entry>
 
 <entry>
   <title>Counting words with NATS</title>
   <link href="/posts/2014/10/16/counting-words-with-nats/"/>
   <updated>2014-10-16T00:00:00+09:00</updated>
   <id>/posts/2014/10/16/counting-words-with-nats</id>
   <content type="html">
&lt;p&gt;Still going through the &lt;i&gt;&lt;a href=&quot;http://www.amazon.com/Exercises-Programming-Style-Cristina-Videira/dp/1482227371/&quot;&gt;Exercises in Programming Styles&lt;/a&gt;&lt;/i&gt;, after
  diving into &lt;a href=&quot;https://github.com/wallyqs/exercises-in-org/blob/master/org/prog-styles/03-monolith/haskell.org&quot;&gt;Haskell&lt;/a&gt; and &lt;a href=&quot;https://github.com/wallyqs/exercises-in-org/blob/master/org/prog-styles/transducers/ruby.org&quot;&gt;Transducers&lt;/a&gt; for a bit, and since I&amp;#8217;ve
  mentioned to other HackerSchoolers about &lt;a href=&quot;https://github.com/derekcollison/nats&quot;&gt;NATS&lt;/a&gt;, I decided to use it for
  the map reduce programming example.  It is somewhat loosely based on the
  &lt;a href=&quot;https://github.com/derekcollison/dist-adder&quot;&gt;dist-adder&lt;/a&gt; example from Derek.&lt;/p&gt;
&lt;h3&gt;NATS server&lt;/h3&gt;
&lt;p&gt;There is readily available &lt;a href=&quot;https://registry.hub.docker.com/u/apcera/gnatsd/&quot;&gt;gnatsd Docker container&lt;/a&gt; that we can use to
  start the server that will be used by the clients to communicate:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;sudo docker run -p 4222:4222 apcera/gnatsd
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Aggregator&lt;/h3&gt;
&lt;p&gt;I call it the aggregator, but basically this process will be in charge
  of dispatching a range of the lines in the text and dispatch the task
  to another node so that it computes the word frequency computation.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;nats/client&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;json&amp;#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;NATS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Run options&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;TERM&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;INT&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NATS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;SRC_ROOT&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;exercises-in-programming-style&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;PRIDE_AND_PREJUDICE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SRC_ROOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;pride-and-prejudice.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;STOP_WORDS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SRC_ROOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;stop_words.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Compute the stop words once.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# This payload information is small enough that it will be transmitted&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# to the frequency counters via the channel&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@stop_words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;STOP_WORDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@stop_words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# also the alphabet&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@stop_words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flatten!&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq!&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Initialize&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@available_computing_nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Discovery Channel&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;NATS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;pride-prejudice.discovery&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;computing_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@available_computing_nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;computing_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[DISCOVERED]      :: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;computing_node&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@available_computing_nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;computing_node&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[AVAILABLE NODES] :: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@available_computing_nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# {&amp;quot;id&amp;quot;=&amp;gt;3, &amp;quot;results&amp;quot;=&amp;gt;{&amp;quot;words&amp;quot;=&amp;gt;[{&amp;quot;test&amp;quot;=&amp;gt;1}]}}&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;NATS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;pride-prejudice.responses&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[DONE]      :: Job &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is done.&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Mark the job as done&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@chunks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Use the partial results and start to count the words&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;counted_words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;results&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;words&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;counted_words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each_pair&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Error while trying to count the words...&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backtrace&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;TOP counted words so far&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;  -  &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Waiting 5 seconds to get resources for the job...&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;EM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pride_and_prejudice_text&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PRIDE_AND_PREJUDICE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;total_lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pride_and_prejudice_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Total lines to split: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_lines&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Most likely cannot split the computation perfectly into the number of nodes,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# so we take the remaining lines and add them to the first batch&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chunk_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@available_computing_nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out_of_chunk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@available_computing_nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Chunk size per node: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk_size&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Read the file, count the number of lines, and divide in chunks&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# according to the number of available nodes&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@chunks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# {index =&amp;gt; {:start, :end, :done, :stop_words }}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chunk_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chunk_end&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@available_computing_nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chunk_end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk_size&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out_of_chunk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;chunk_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out_of_chunk&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out_of_chunk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chunk_end&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@chunks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:stop_words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@stop_words&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;chunk_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk_end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@chunks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;job_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# Only want one checker to respond to this&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;NATS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;pride-prejudice.requests&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[REQUEST]   :: Job #&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; needs to be done. Anyone can help? Range is (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;NATS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;pride-prejudice.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.compute&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[HOPING]    :: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -- &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; to be done by &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Word Frequency Counter&lt;/h3&gt;
&lt;p&gt;Then each one of the counters, will receive a chunk of words to
  process and ignore, then reply with the partial computed frequency when done.&lt;/p&gt;
&lt;p&gt;While receiving tasks, we counter taints itself a little
  according to the number of tasks that it is in charge of processing.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;nats/client&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;securerandom&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;json&amp;#39;&lt;/span&gt;

&lt;span class=&quot;vg&quot;&gt;$stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;TERM&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;INT&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NATS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;SRC_ROOT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;exercises-in-programming-style&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;PRIDE_AND_PREJUDICE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SRC_ROOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;pride-and-prejudice.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SecureRandom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;INFO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;range_start&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;range_end&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stop_words&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;stop_words&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;words_frequency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Read local copy of the document and fetch that range of lines&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PRIDE_AND_PREJUDICE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.range_end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/[^a-zA-Z0-9]/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# remove non alphanumeric&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;words_frequency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;words&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words_frequency&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;NATS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;vi&quot;&gt;@offerings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;EM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_periodic_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;NATS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;pride-prejudice.discovery&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;NATS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;pride-prejudice.requests&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;EM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@offerings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NATS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@offerings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# decrease taint delay&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;NATS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;pride-prejudice.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.compute&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;job_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[OK]        :: Start to work on (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@offerings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# delay ourselves according to the number of task being done&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;job_done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;:results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;NATS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;pride-prejudice.responses&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job_done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Output&lt;/h3&gt;
&lt;p&gt;Once the run is done the output would look something similar to this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;nats-server         -- started with pid 15660
aggregator          -- Waiting 5 seconds to get resources for the job...
aggregator          -- [DISCOVERED]      :: {&amp;quot;id&amp;quot;=&amp;gt;&amp;quot;251adacb-0605-4e96-8904-9fd5f239fce2&amp;quot;}
aggregator          -- [AVAILABLE NODES] :: 1
aggregator          -- [DISCOVERED]      :: {&amp;quot;id&amp;quot;=&amp;gt;&amp;quot;a97518f9-2c10-4362-9800-5ec8e57651b9&amp;quot;}
aggregator          -- [AVAILABLE NODES] :: 2
aggregator          -- [DISCOVERED]      :: {&amp;quot;id&amp;quot;=&amp;gt;&amp;quot;4ce45026-3cba-4209-a17b-e27e425366c0&amp;quot;}
aggregator          -- [AVAILABLE NODES] :: 3
aggregator          -- Total lines to split: 13426
aggregator          -- Chunk size per node: 4475
aggregator          -- [REQUEST]   :: Job #1 needs to be done. Anyone can help? Range is (0:4475)
aggregator          -- [HOPING]    :: 0 -- 4475 to be done by 4ce45026-3cba-4209-a17b-e27e425366c0.
frequency-counter:1 -- [OK]        :: Start to work on (0:4475)
aggregator          -- [DONE]      :: Job 1 is done.
aggregator          -- TOP counted words so far
aggregator          -- mr  -  395
aggregator          -- elizabeth  -  202
aggregator          -- very  -  198
aggregator          -- bingley  -  181
aggregator          -- darcy  -  162
aggregator          -- bennet  -  160
aggregator          -- miss  -  142
aggregator          -- such  -  131
aggregator          -- much  -  130
aggregator          -- mrs  -  121
aggregator          -- jane  -  105
aggregator          -- more  -  102
aggregator          -- collins  -  95
aggregator          -- one  -  95
aggregator          -- though  -  77
aggregator          -- think  -  74
aggregator          -- being  -  73
aggregator          -- know  -  72
aggregator          -- never  -  71
aggregator          -- lady  -  70
aggregator          -- well  -  69
aggregator          -- good  -  67
aggregator          -- man  -  65
aggregator          -- soon  -  64
aggregator          -- before  -  63
aggregator          -- [REQUEST]   :: Job #2 needs to be done. Anyone can help? Range is (4476:8951)
aggregator          -- [HOPING]    :: 4476 -- 8951 to be done by 251adacb-0605-4e96-8904-9fd5f239fce2.
frequency-counter:3 -- [OK]        :: Start to work on (4476:8951)
aggregator          -- [DONE]      :: Job 2 is done.
aggregator          -- TOP counted words so far
aggregator          -- mr  -  630
aggregator          -- elizabeth  -  437
aggregator          -- very  -  378
aggregator          -- darcy  -  327
aggregator          -- such  -  251
aggregator          -- bingley  -  245
aggregator          -- much  -  243
aggregator          -- miss  -  240
aggregator          -- mrs  -  239
aggregator          -- more  -  218
aggregator          -- bennet  -  206
aggregator          -- one  -  187
aggregator          -- jane  -  185
aggregator          -- herself  -  173
aggregator          -- collins  -  167
aggregator          -- think  -  152
aggregator          -- lady  -  149
aggregator          -- before  -  146
aggregator          -- though  -  143
aggregator          -- well  -  141
aggregator          -- never  -  140
aggregator          -- sister  -  139
aggregator          -- little  -  136
aggregator          -- soon  -  133
aggregator          -- know  -  133
aggregator          -- [REQUEST]   :: Job #3 needs to be done. Anyone can help? Range is (8952:13426)
aggregator          -- [HOPING]    :: 8952 -- 13426 to be done by 251adacb-0605-4e96-8904-9fd5f239fce2.
frequency-counter:3 -- [OK]        :: Start to work on (8952:13426)
aggregator          -- [DONE]      :: Job 3 is done.
aggregator          -- TOP counted words so far
aggregator          -- mr  -  786
aggregator          -- elizabeth  -  635
aggregator          -- very  -  488
aggregator          -- darcy  -  418
aggregator          -- such  -  395
aggregator          -- mrs  -  343
aggregator          -- much  -  329
aggregator          -- more  -  327
aggregator          -- bennet  -  323
aggregator          -- bingley  -  306
aggregator          -- jane  -  295
aggregator          -- miss  -  283
aggregator          -- one  -  275
aggregator          -- know  -  239
aggregator          -- before  -  229
aggregator          -- herself  -  227
aggregator          -- though  -  226
aggregator          -- well  -  224
aggregator          -- never  -  220
aggregator          -- sister  -  218
aggregator          -- soon  -  216
aggregator          -- think  -  211
aggregator          -- now  -  209
aggregator          -- time  -  203
aggregator          -- good  -  201
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Further work&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Extend this example so that it becomes resilient to fault tolerance,
    and see how does defending against this impact the style.&lt;/li&gt;
  &lt;li&gt;Dispatch to other nodes with using a different client.&lt;/li&gt;
&lt;/ul&gt;


</content>
 </entry>
 
 <entry>
   <title>Term Frequency with Transducers gem in Ruby</title>
   <link href="/posts/2014/10/11/transducers-in-ruby/"/>
   <updated>2014-10-11T00:00:00+09:00</updated>
   <id>/posts/2014/10/11/transducers-in-ruby</id>
   <content type="html">
&lt;p&gt;Yesterday, Cognitect &lt;a href=&quot;https://twitter.com/cognitect/status/520644214116212736https://twitter.com/cognitect/status/520644214116212736&quot;&gt;announced&lt;/a&gt; about a Ruby implementation among
  others of the transducers concept that Rich Hickey &lt;a href=&quot;https://www.youtube.com/watch?v=6mTbuzafcII&quot;&gt;talked about at StrangeLoop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After watching the talk a number of times and reading a little the source of the &lt;a href=&quot;https://github.com/cognitect-labs/transducers-ruby/blob/master/lib/transducers.rb&quot;&gt;gem&lt;/a&gt;,
  I gave it a shot at using it to solve the term frequency exercise
  from the &lt;i&gt;&lt;a href=&quot;http://www.amazon.com/Exercises-Programming-Style-Cristina-Videira/dp/1482227371/&quot;&gt;Exercises in Programming Styles&lt;/a&gt;&lt;/i&gt; book.&lt;/p&gt;
&lt;h2&gt;Transducers usage in Ruby&lt;/h2&gt;
&lt;p&gt;The full example looks as follows: (explanation of the steps is further below).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;transducers&amp;#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;SRC_ROOT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;../../..&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;exercises-in-programming-style&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;PRIDE_AND_PREJUDICE&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SRC_ROOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;pride-and-prejudice.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;STOP_WORDS&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SRC_ROOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;stop_words.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# load words to ignore&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stop_words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;STOP_WORDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stop_words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# also alphabet&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stop_words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flatten!&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq!&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PRIDE_AND_PREJUDICE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;frequency_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words_frequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words_frequency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;words_frequency&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Transducers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Transducers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/[^a-zA-Z0-9]/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# remove non alphanumeric&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;# split into words&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Transducers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# remove stop words&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;words_frequency&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;words_frequency_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Transducers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequency_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words_frequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Print the top 25 terms&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;words_frequency_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;  -  &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Going over the steps of the implementatoin&lt;/h2&gt;
&lt;h3&gt;Dependencies and definitions&lt;/h3&gt;
&lt;h4&gt;&lt;code&gt;Gemfile&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://rubygems.org&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;transducers&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Imports&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;transducers&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Location of the files&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;SRC_ROOT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;../../..&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;exercises-in-programming-style&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;PRIDE_AND_PREJUDICE&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SRC_ROOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;pride-and-prejudice.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;STOP_WORDS&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SRC_ROOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;stop_words.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Stop words&lt;/h4&gt;
&lt;p&gt;The &lt;i&gt;stop words&lt;/i&gt; are the list of words and single letters that
  appear in the test that we decide to ignore.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;# load words to ignore&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stop_words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;STOP_WORDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stop_words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# also alphabet&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stop_words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flatten!&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Using Transducers&lt;/h3&gt;
&lt;p&gt;In order to determine the term frequency in the pride and prejudice
  text, we will do the following transformations:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Create a collection of the lines from the raw body of text&lt;/li&gt;
  &lt;li&gt;Remove non-alphanumeric characters from the line&lt;/li&gt;
  &lt;li&gt;Split the line into words&lt;/li&gt;
  &lt;li&gt;Remove words which are considered to be &lt;i&gt;stop words&lt;/i&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then as part of the reducing step:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Increment counter in &lt;code&gt;words_frequency&lt;/code&gt; hash each time the word appears&lt;/li&gt;
  &lt;li&gt;Sort the words by frequency&lt;/li&gt;
  &lt;li&gt;Reverse the list&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then from this list, we will take the top 25 terms and print them to stdout.&lt;/p&gt;
&lt;h4&gt;The Collection&lt;/h4&gt;
&lt;p&gt;The collection upon which we will be applying the transformations
  are each one of the lines that exist in the text.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PRIDE_AND_PREJUDICE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;The Reducer&lt;/h4&gt;
&lt;p&gt;From the &lt;a href=&quot;https://github.com/cognitect-labs/transducers-ruby/blob/222686714cc55f984671af48bf506f1c130fc013/lib/transducers.rb#L24&quot;&gt;source&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A &lt;span style=&quot;text-decoration:underline;&quot;&gt;reducer&lt;/span&gt; is an object with a `step` method that takes a result
    (so far) and an input and returns a new result. This is similar to
    the blocks we pass to Ruby&amp;#8217;s `reduce` (a.k.a `inject`), and serves a
    similar role in &lt;span style=&quot;text-decoration:underline;&quot;&gt;transducing process&lt;/span&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As part of its reducing step, the reducer will receive a list of words
  in a line, then iterate over this list and increment the counter in
  the &lt;code&gt;words_frequency&lt;/code&gt; hash.&lt;/p&gt;
&lt;p&gt;Then, once the &lt;code&gt;words_frequency&lt;/code&gt; has been computed, we returned the
  result sorted by frequency in descending order.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;frequency_counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words_frequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words_frequency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;words_frequency&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;The Transducer&lt;/h4&gt;
&lt;p&gt;Again from the &lt;a href=&quot;https://github.com/cognitect-labs/transducers-ruby/blob/222686714cc55f984671af48bf506f1c130fc013/lib/transducers.rb#L33&quot;&gt;source&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A &lt;span style=&quot;text-decoration:underline;&quot;&gt;handler&lt;/span&gt; is an object with a `call` method that a reducer uses
    to process input. In a `map` operation, this would transform the
    input, and in a `filter` operation it would act as a predicate.&lt;/p&gt;
  &lt;p&gt;A &lt;span style=&quot;text-decoration:underline;&quot;&gt;transducer&lt;/span&gt; is an object that transforms a reducer by adding
    additional processing for each element in a collection of inputs.&lt;/p&gt;
  &lt;p&gt;A &lt;span style=&quot;text-decoration:underline;&quot;&gt;transducing process&lt;/span&gt; is invoked by calling
    `Transducers.transduce` with a transducer, a reducer, an optional
    initial value, and an input collection.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our transducer will compose the functions which filter the
  non-alphanumeric characters that exists on a line, as well as words
  that should be ignored from the text.&lt;/p&gt;
&lt;p&gt;This results in the reducer receiving a list of words to compute the
  term frequency list.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Transducers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Transducers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/[^a-zA-Z0-9]/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# remove non alphanumeric&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;# split into words&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Transducers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# remove stop words&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;words_frequency&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;words_frequency_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Transducers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequency_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words_frequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Printing the results&lt;/h4&gt;
&lt;p&gt;To verify the results, we only want to check which were the top 25
  terms that have the highest frequency&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;# Print the top 25 terms&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;words_frequency_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;  -  &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


</content>
 </entry>
 
 <entry>
   <title>Hacker School - week #1 recap</title>
   <link href="/posts/2014/10/10/hs-recap-1st-week/"/>
   <updated>2014-10-10T00:00:00+09:00</updated>
   <id>/posts/2014/10/10/hs-recap-1st-week</id>
   <content type="html">
&lt;p&gt;It&amp;#8217;s been almost a week since I came to New York to join
  HackerSchool, a quick recap:&lt;/p&gt;
&lt;h3&gt;Week of [2014-10-06]&amp;#8211;[2014-10-10]&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/cristalopes&quot;&gt;Crista Lopes&lt;/a&gt; was the resident during this week and she talked about
    her &lt;i&gt;&lt;a href=&quot;http://www.amazon.com/Exercises-Programming-Style-Cristina-Videira/dp/1482227371/&quot;&gt;Exercises in Programming Styles&lt;/a&gt;&lt;/i&gt; book during the first days.
    I&amp;#8217;m not even halfway through the book yet, though I have to say that
    the book has already left a mark.
    &lt;p&gt;Crista then went on to concisely explain theoretical concepts
      around types, data structures, and even monads in Haskell.&lt;/p&gt;
    &lt;p&gt;I also shared a bit about Org Babel, which may have to do something
      to do with the following tweet:&lt;/p&gt;
  &lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;Note to self: set this up in my emacs and learn more about it &lt;a href=&quot;http://t.co/HIaegQ5bHp&quot;&gt;http://t.co/HIaegQ5bHp&lt;/a&gt;&lt;/p&gt;&amp;mdash; Crista Lopes (@cristalopes) &lt;a href=&quot;https://twitter.com/cristalopes/status/519971789422997505&quot;&gt;October 8, 2014&lt;/a&gt;&lt;/blockquote&gt;
  &lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;Right now I&amp;#8217;m working through the exercises &lt;a href=&quot;https://github.com/wallyqs/exercises-in-org/tree/master/org/prog-styles&quot;&gt;here&lt;/a&gt; (of course, in Org mode).
    I named it &lt;i&gt;Exercises in Org&lt;/i&gt; to keep the scope open
    to other exercises, though focusing on the &lt;i&gt;programming styles&lt;/i&gt; book at this moment.&lt;/li&gt;
  &lt;li&gt;I took a bit of time to revamp my blog yet again.  This time using
    Hyde as the the theme and the &lt;code&gt;org/&lt;/code&gt;, &lt;code&gt;src/&lt;/code&gt; folder structure that I
    have been practicing lately.  Repo at &lt;a href=&quot;https://github.com/wallyqs/org-hyde&quot;&gt;wallyqs/org-hyde&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Another great thing of being in NYC is the amount of meetups that there are.
    I assisted to the Mesos NYC meetup at the Twitter offices to hear
    about the practical usage of Aurora and Mesos, as presented by &lt;a href=&quot;https://twitter.com/wfarner&quot;&gt;Bill Farner&lt;/a&gt;.
    In the following weeks I will be diving more into Mesos, so this was
    a good opportunity to ask directly to those who operate regarding
    its practical usage.&lt;/li&gt;
  &lt;li&gt;Living in NYC related:
    &lt;ul&gt;
      &lt;li&gt;Got my Airbnbs setup until the beginnings of December.&lt;/li&gt;
      &lt;li&gt;Discovered &lt;a href=&quot;http://www.gasolinealleycoffee.com/&quot;&gt;Gasoline Alley Coffee&lt;/a&gt; which is just around the corner of HackerSchool.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Overall, having a great time.  The &lt;a href=&quot;https://www.hackerschool.com/manual#sub-sec-social-rules&quot;&gt;social rules being applied&lt;/a&gt; (no feigning, no subtleisms, &amp;#8230;)
    make up for an comfortable environment of collaboration which I had not experienced before,
    at least definitely not on this level.&lt;/li&gt;
&lt;/ul&gt;


</content>
 </entry>
 
 <entry>
   <title>Switching to Hyde</title>
   <link href="/posts/2014/10/08/moved-to-hyde/"/>
   <updated>2014-10-08T00:00:00+09:00</updated>
   <id>/posts/2014/10/08/moved-to-hyde</id>
   <content type="html">
&lt;p&gt;Here is a modified version of the original Hyde fit for my flow
  to continue doing things with mostly Org mode.&lt;/p&gt;
&lt;p&gt;The repo can be found here: &lt;a href=&quot;https://github.com/wallyqs/org-hyde&quot;&gt;https://github.com/wallyqs/org-hyde&lt;/a&gt;&lt;/p&gt;


</content>
 </entry>
 
 <entry>
   <title>At Hacker School in NY</title>
   <link href="/posts/2014/10/06/first-day-at-hackerschool/"/>
   <updated>2014-10-06T00:00:00+09:00</updated>
   <id>/posts/2014/10/06/first-day-at-hackerschool</id>
   <content type="html">
&lt;p&gt;I managed to get into the Fall batch from Hacker School.
  Lots of things to focus on!&lt;/p&gt;
&lt;p&gt;Some links:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/cristalopes&quot;&gt;Crista Lopes&lt;/a&gt; talk from StrangeLoop about &lt;a href=&quot;http://www.infoq.com/presentations/style-methodology&quot;&gt;programming styles&lt;/a&gt;, which
    are in the end nothing but constraints.
    (I was there at that StrangeLoop but somehow missed the talk&amp;#8230;)&lt;/li&gt;
  &lt;li&gt;And accompanying exercises
    &lt;a href=&quot;https://github.com/crista/exercises-in-programming-style&quot;&gt;https://github.com/crista/exercises-in-programming-style&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Talk on Monads in Haskell, (there are Haskell books everywhere&amp;#8230;)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.haskell.org/haskellwiki/Monad&quot;&gt;http://www.haskell.org/haskellwiki/Monad&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Styles &lt;a href=&quot;https://github.com/crista/exercises-in-programming-style/tree/master/09-the-one&quot;&gt;#9&lt;/a&gt; and &lt;a href=&quot;https://github.com/crista/exercises-in-programming-style/tree/master/24-quarantine&quot;&gt;#24&lt;/a&gt; from Crista&amp;#8217;s book.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SICP
    &lt;ul&gt;
      &lt;li&gt;Morning group to cover it.&lt;/li&gt;
      &lt;li&gt;Version of the book at: &lt;a href=&quot;http://sarabander.github.io/sicp/&quot;&gt;http://sarabander.github.io/sicp/&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;


</content>
 </entry>
 
 <entry>
   <title>About Org Converge</title>
   <link href="/posts/2014/06/04/org-converge-post/"/>
   <updated>2014-06-04T00:00:00+09:00</updated>
   <id>/posts/2014/06/04/org-converge-post</id>
   <content type="html">
&lt;p&gt;In a past release from Org Ruby, I added the functionality to be able
  to turn off exporting the results attached to a code block. For
  example, here only the actual code would make it to the export:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;#+begin_src sh :results code
echo &amp;#39;hello&amp;#39;
#+end_src

#+RESULTS:
#+BEGIN_SRC sh
hello
#+END_SRC
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Doing this involved adding support to parse the header arguments from
  a code block, so I decided to start playing with the idea of
  implementing tangling code blocks:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;#+begin_src sh :tangle /etc/component.yml
port: 4000
#+end_src
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is just a subset of the functionality provided by the powerful
  Org Babel mode, and still very basic since it does not
  support &lt;code&gt;#+MACROS&lt;/code&gt; for example, which would make feature more
  convenient.&lt;/p&gt;
&lt;p&gt;After doing this, and since this is all Ruby, I imagined that since
  there is good interop with other reliable Ruby tools, it would be
  interesting to reopen foreman for actually running the blocks.&lt;/p&gt;
&lt;p&gt;All this functionality is wrapped into a gem named &lt;a href=&quot;https://github.com/wallyqs/org-converge&quot;&gt;org-converge&lt;/a&gt;,
  named that way in the sense that all reproducible runs should
  converge into a state.&lt;/p&gt;
&lt;p&gt;In the future, I hope to have more Chef/Puppet/Ansible
  like features, like &lt;a href=&quot;https://github.com/wallyqs/org-converge/commit/5393c76127c7a38bc071c14dbd54de9b8665f343&quot;&gt;idempotency&lt;/a&gt;:&lt;/p&gt;
&lt;h3&gt;Idempotency example via &lt;code&gt;:if&lt;/code&gt; and &lt;code&gt;:unless&lt;/code&gt; switches&lt;/h3&gt;
&lt;p&gt;The way this work is by linking 2 different code blocks,
  so that one can define whether the second one should be executed.&lt;/p&gt;
&lt;p&gt;In order to achieve this, for now the blocks need to be defined sequentially
  and use the exit status to check whether it should be run or not.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;#+name: install-package
#+begin_src sh
echo &amp;quot;brew install something...&amp;quot;
echo &amp;quot;package is installed&amp;quot; &amp;gt; installed
#+end_src

#+name: package-already-installed
#+begin_src sh
if [[ -e installed ]]; then
  echo &amp;quot;Already installed&amp;quot;
  exit 0
else
  echo &amp;quot;Needs install&amp;quot;
  exit 1
fi
#+end_src

#+name: install-package-once-again
#+begin_src sh :unless package-already-installed
echo &amp;quot;Installing the package once again...&amp;quot;
echo &amp;quot;not run&amp;quot; &amp;gt;&amp;gt; installed
#+end_src

#+name: do-everything-even-if-package-installed
#+begin_src sh :if package-already-installed
echo &amp;quot;Doing this even if installed already...&amp;quot; 
echo &amp;quot;eof&amp;quot; &amp;gt;&amp;gt; installed
#+end_src
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now when we run it the first time, we would get the following output:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;gem install org-converge

org-converge idempotent-run.org

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2014-11-28T13:18:13 -0500&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; package-already-installed -- Needs install
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2014-11-28T13:18:13 -0500&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; package-already-installed -- started with pid 47963
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2014-11-28T13:18:13 -0500&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; package-already-installed -- exited with code 1
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2014-11-28T13:18:13 -0500&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; install-package -- started with pid 47967
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2014-11-28T13:18:13 -0500&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; install-package -- Installing the package...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2014-11-28T13:18:13 -0500&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; install-package -- exited with code 0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;#8230;but if we run it again, we would get the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;org-converge idempotent-run.org

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2014-11-28T13:19:07 -0500&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; package-already-installed -- started with pid 48474
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2014-11-28T13:19:07 -0500&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; package-already-installed -- Already installed
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2014-11-28T13:19:07 -0500&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; package-already-installed -- exited with code 0
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2014-11-28T13:19:07 -0500&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; install-package -- Skipped since :unless clause matches check from &lt;span class=&quot;s1&quot;&gt;&amp;#39;package-already-installed&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2014-11-28T13:19:07 -0500&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Run has completed successfully.
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Multiprocess run usage&lt;/h3&gt;
&lt;p&gt;I also have been using lately for doing multi process running,
  and I have found it pretty comfortable for when practicing
  literate programming with Org Babel.&lt;/p&gt;
&lt;p&gt;An example, the following 3 scripts should be run in parallel
  with all output being flushed to the screen.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;- Count some numbers with bash

#+name: bash_counter
#+begin_src sh :shebang #!/bin/bash

for i in `seq 1 5`; do 
  echo &amp;quot;Writing! $i&amp;quot;
  echo &amp;quot;hello $i from bash&amp;quot;
  sleep $(($RANDOM % 5))
done

#+end_src

- Count some numbers with ruby

#+name: ruby_counter
#+begin_src ruby :shebang #!/usr/bin/ruby
$stdout.sync = true

10.times do |n|
  puts &amp;quot;And now writing! #{n}&amp;quot;
  puts &amp;quot;Hello from Ruby&amp;quot;
  sleep 0.5
end
#+end_src

- Print some numbers with python

#+name: python_counter
#+begin_src python :shebang #!/usr/bin/python
for i in range(0, 20):
  print &amp;quot;From Python&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


</content>
 </entry>
 
 <entry>
   <title>Replacing Jekyll YAML headers with Org mode buffer settings</title>
   <link href="/posts/2013/12/06/jekyll-without-yaml/"/>
   <updated>2013-12-06T00:00:00+09:00</updated>
   <id>/posts/2013/12/06/jekyll-without-yaml</id>
   <content type="html">
&lt;p&gt;I took a quick look at what would be required
  to avoid having to use &lt;code&gt;YAML&lt;/code&gt; headers for Jekyll and using
  only Org mode buffer settings to set the layout, title
  from a Jekyll post.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jekyll&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read_yaml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_with_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                            &lt;span class=&quot;n&quot;&gt;merged_file_read_opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;org_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Orgmode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;org_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_buffer_settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each_pair&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extracted_excerpt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract_excerpt&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Error converting file &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way, instead of having to write&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;something&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can just continue to use Org mode syntax:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;#+title: Replacing Jekyll YAML headers with Org mode buffer settings&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My fork of &lt;code&gt;jekyll-org&lt;/code&gt; which has this feature enabled is &lt;a href=&quot;https://github.com/wallyqs/jekyll-org/blob/54e1e19697e12d73e9765fb96db37522666af274/convert.rb&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Update [2013-12-07 Sat]&lt;/h2&gt;
&lt;p&gt;I did some modifications again to plugin for converting Org mode
  texts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Disable using Liquid tags and rely mostly on Org mode syntax for
    exporting&lt;/li&gt;
  &lt;li&gt;Remove the &lt;code&gt;#+TITLE&lt;/code&gt; from in buffer settings to exporting it 2 times
    with different styles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The resulting plugin is here:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;org-ruby&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jekyll&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# This overrides having to use YAML in the posts&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# and instead use in buffer settings from Org mode&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read_yaml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_with_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                       &lt;span class=&quot;n&quot;&gt;merged_file_read_opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;org_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Orgmode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;org_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_buffer_settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each_pair&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Remove #+TITLE from the buffer settings to avoid double exporting&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;org_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_buffer_settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/title/i&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;buffer_setting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downcase&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer_setting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# Disable Liquid tags from the output&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ORG&lt;/span&gt;
&lt;span class=&quot;sh&quot;&gt;{％ raw ％}&lt;/span&gt;
&lt;span class=&quot;sh&quot;&gt;#{org_text.to_html}&lt;/span&gt;
&lt;span class=&quot;sh&quot;&gt;{％ endraw ％}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ORG&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extracted_excerpt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract_excerpt&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Error converting file &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backtrace&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Based from https://github.com/eggcaker/jekyll-org&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrgConverter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Converter&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;safe&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;priority&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:low&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/org/i&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;output_ext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;.html&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Filters&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;restify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getConverterImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OrgConverter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


</content>
 </entry>
 
 <entry>
   <title>Started to blog with Jekyll</title>
   <link href="/posts/2013/11/24/hello/"/>
   <updated>2013-11-24T00:00:00+09:00</updated>
   <id>/posts/2013/11/24/hello</id>
   <content type="html">
&lt;p&gt;Starting a blog using the &lt;a href=&quot;https://github.com/holman/left&quot;&gt;Left&lt;/a&gt; theme for &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Compared to other solutions, this uses the &lt;code&gt;org-ruby&lt;/code&gt; parser
  to export &lt;code&gt;.org&lt;/code&gt; files into HTML. You can check the source
  for this site here: &lt;a href=&quot;https://github.com/wallyqs/wallyqs.github.io&quot;&gt;https://github.com/wallyqs/wallyqs.github.io&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Syntax highlighting works!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are still some pending things that I would like to improve:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use the &lt;a href=&quot;https://github.com/wallyqs/re-org&quot;&gt;re-org&lt;/a&gt; tool to create and organize the posts that
    would finally go into the &lt;code&gt;_posts&lt;/code&gt; directory for publishing.
    I think in the end using a YAML file would have been better than
    having to use environment variables.&lt;/li&gt;
  &lt;li&gt;Try to extend or patch Jekyll so that I can avoid having to write:
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;---
layout: post
title:  Hello world
category: posts
---
&lt;/pre&gt;&lt;/div&gt;
    &lt;p&gt;And instead cover this with Org syntax like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;#+layout:   post
#+title:    Hello world
#+category: posts
&lt;/pre&gt;&lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other than that, the setup promises to be very comfortable for
  writing, I&amp;#8217;ll see how it goes.&lt;/p&gt;


</content>
 </entry>
 

</feed>
